@inject IGenService genService
@inject ILogger<NavMenu> logger

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">ReslifeFiveFrontEnd</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Counter
            </NavLink>
        </div>




        <div class="nav-item px-3">
            <NavLink class="nav-link" href="userPortals">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> User Portals
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="otherPortals">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Other Portals
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="adminPortals">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Admin Portals
            </NavLink>
        </div>


       

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="metricContracting">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Metrics Spring 2025
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="metricsPortal">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Metrics Portal
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="Login">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Login
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="viewUserInfo">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> User Info
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <AutoComplete @bind-Value="selectedUserName"
                          TItem="User"
                          DataProvider="UserDataProvider"
                          PropertyName="PreferredFullName"
                          Placeholder="Search for a user..."
                          OnChanged="(User user) => SelectUser(user)" >
       
            </AutoComplete>
                          


                          <Button Color="ButtonColor.Primary" @onclick="ShowUserCanvas">Show User Details</Button>
        </div>

        <div class="nav-item px-3">
            <Button class="nav-link" @onclick="ToggleManageObjectsCollapse"><span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Manage Objects</Button>
        </div>
        <Collapse @ref="ManageObjectsCollapse">
            <Card class="bg-light">
                <NavLink class="nav-link custom-nav-item custom-text" href="manageRole">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Manage Roles
                </NavLink>
                <NavLink class="nav-link custom-nav-item custom-text" href="manageUser">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Manage Users
                </NavLink>
                <NavLink class="nav-link custom-nav-item custom-text" href="gridBlockTestJ">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Block J Readonly
                </NavLink>
                <NavLink class="nav-link custom-nav-item custom-text" href="editGridBlockJ">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Block J Editable
                </NavLink>
            </Card>
        </Collapse>

    </nav>
</div>





<Offcanvas @ref="userOffCanvas">
    <BodyTemplate>
        @if(!string.IsNullOrWhiteSpace(selectedUser.RestOfName))
        {
            <div>
                <h4>Name: @selectedUser.RestOfName @selectedUser.Surname</h4>
                <h4>DOB: @selectedUser.DateOfBirth</h4>
                <h4>Net ID: @selectedUser.NetId</h4>
                <h4>BYU ID: @selectedUser.ByuId</h4>
                <h4>Citizenship: @selectedUser.CitizenshipCountry</h4>
            </div>
        }
        else
        {
            <div>
                <h3>No User Selected</h3>
            </div>
        }

    </BodyTemplate>
</Offcanvas>
@code{
    Collapse ManageObjectsCollapse = default!;
    private string selectedUserName = string.Empty;
    private User selectedUser = new User();
    private Modal userModal = default!;
    private Offcanvas userOffCanvas = default!;
    private AutoComplete<User> UserAutoComplete = default!;


    #region UI
    private async Task ToggleManageObjectsCollapse() => await ManageObjectsCollapse.ToggleAsync();



    private async Task<AutoCompleteDataProviderResult<User>> UserDataProvider(AutoCompleteDataProviderRequest<User> request)
    {
        var searchText = request.Filter?.Value?.ToString()?.ToLowerInvariant();

        var query = genService.GetModel<User>();

        if (!string.IsNullOrEmpty(searchText))
        {
            // Try parsing the search text as a date in the "mmddyyyy" format
            DateTime? parsedDate = null;
            if (DateTime.TryParseExact(searchText, "MMddyyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out var parsed))
            {
                parsedDate = DateTime.SpecifyKind(parsed.Date, DateTimeKind.Utc);
            }
            query = query.Where(u =>
                (!string.IsNullOrEmpty(u.Surname) && u.Surname.ToLower().Contains(searchText)) ||
                (!string.IsNullOrEmpty(u.RestOfName) && u.RestOfName.ToLower().Contains(searchText)) ||
                (!string.IsNullOrEmpty(u.PreferredFirstName) && u.PreferredFirstName.ToLower().Contains(searchText)) ||
                (!string.IsNullOrEmpty(u.ByuId) && u.ByuId.ToLower().Contains(searchText)) ||
                (!string.IsNullOrEmpty(u.NetId) && u.NetId.ToLower().Contains(searchText)) ||
                (parsedDate != null && u.DateOfBirth.Date == parsedDate.Value) // Match full birthday
            );
        }
        var filteredUsers = query.OrderBy(u => u.RestOfName);
        return await Task.FromResult(new AutoCompleteDataProviderResult<User> { Data = filteredUsers, TotalCount = filteredUsers.Count() });
    }


    private void SelectUser(User user)
    {
        selectedUser = user;
        //selectedUserName = selectedUser.RestOfName + " " + selectedUser.Surname;
    }

    private async Task ShowUserCanvas()
    {
        await userOffCanvas.ShowAsync();
    }

    #endregion










}