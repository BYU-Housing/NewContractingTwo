@inject ILogger<NavMenu> _logger
@inject AuthenticationStateProvider authState
@inject IGenService genService
@inject NavigationManager navigation
@inject ITargetUserService target

<div class="top-row ps-3 navbar" style="background-color: #002E5D;">
    <nav class="d-flex justify-content-evenly w-100" style="overflow: visible">
        <div>
            <Button @onclick="NavigateToHome" Style="color: white">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span>
            </Button>
        </div>        
        <div>
            <Button @onclick="ToggleUserPortals" style="color: white;" @onmouseenter="() => UserPortalsCollapse.ShowAsync()"><span class="person-lines-fill" style="color: white;"></span>User Portals</Button>
            <Collapse @ref="UserPortalsCollapse" @onmouseleave="() => UserPortalsCollapse.HideAsync()">
                    <Card class="bg-light">
                    <NavLink class="nav-link custom-nav-item custom-text" href="Login">
                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Login
                    </NavLink>
                    <NavLink class="nav-link custom-nav-item custom-text" href="counter">
                        <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Counter
                    </NavLink>
                    <NavLink class="nav-link custom-nav-item custom-text" href="userPortals">
                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Other User Portals
                    </NavLink>
                </Card>
            </Collapse>
        </div>
        <div> 
            <Button @onclick="ToggleAdminPortals" style="color: white;" @onmouseenter="() => AdminPortalsCollapse.ShowAsync()" ><span class="key" style="color: white;"></span>Admin Portals</Button>
            <Collapse @ref="AdminPortalsCollapse" @onmouseleave="() => AdminPortalsCollapse.HideAsync()">
                <Card>
                    <NavLink class="nav-link custom-nav-item custom-text" href="gridBlockTestJ">
                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Block J Readonly
                    </NavLink>
                    <NavLink class="nav-link custom-nav-item custom-text" href="editGridBlockJ">
                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Block J Editable
                    </NavLink>
                    <NavLink class="nav-link custom-nav-item custom-text" href="manageUser">
                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Manage Users
                    </NavLink>
                    <NavLink class="nav-link custom-nav-item custom-text" href="manageRole">
                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Manage Roles
                    </NavLink>
                </Card>
            </Collapse>
        </div>
        <div style ="overflow: visible;">
            <AutoComplete @bind-Value="selectedUserName"
                          TItem="User"
                          DataProvider="UserDataProvider"
                          PropertyName="SearchBarInformation"
                          Placeholder="Search for a user..."
                          OnChanged="(User user) => SelectUser(user)"
                              style="width: 350px">


                    
            </AutoComplete>
        </div>
        <div style="display: flex; align-items: flex-start; justify-content: space-between; flex-wrap: wrap">

            @if (IsUserAuthenticated)
            {
                <div style="display: flex; flex-direction: column; align-items: flex-start; margin-left: auto;">
                    <Button @onclick="ShowProfileOffCanvas" style="color: white; font-size: 14px; padding: 2px 5px; background: none; border: none; cursor: pointer;">
                        Active User: @LoggedInUser.PreferredFirstName
                    </Button>
                    <span style="color: white; font-size: 12px; line-height: 1;"> Target User: @(target?.targetUser?.PreferredFullName ?? "None")</span>
                </div>
            }
            <div style="padding: 5px">
                @if (IsUserAuthenticated)
                {
                    <Button class="light-blue-button" Color="ButtonColor.Secondary" style="color: white; font-size: 14px;" @onclick="Logout">Logout</Button>
                }
                else
                {
                    <Button class="light-blue-button" Color="ButtonColor.Primary" style="color: white; font-size: 14px;" @onclick="NavToLogin">Sign In</Button>
                }
            </div>
        </div>

        </nav>
</div>










<Offcanvas @ref="ProfileOffCanvas">
    <BodyTemplate>
        @if(!string.IsNullOrWhiteSpace(LoggedInUser.RestOfName))
        {   <div>
              
                <h4>Name: @LoggedInUser.RestOfName @LoggedInUser.Surname</h4>
                <h4>DOB: @LoggedInUser.DateOfBirth</h4>
                <h4>Net ID: @LoggedInUser.NetId</h4>
                <h4>BYU ID: @LoggedInUser.ByuId</h4>
                <h4>Citizenship: @LoggedInUser.CitizenshipCountry</h4>
            </div>       
        }
        else
        {
            <div>
                <h3>User Not Logged In</h3>
            </div>
        }

    </BodyTemplate>
    
</Offcanvas>

@code{
    #region instantiations
    Collapse AdminPortalsCollapse = default!;
    Collapse UserPortalsCollapse = default!;
    private Offcanvas ProfileOffCanvas = default!;
    private User LoggedInUser = new User();
    private User TargetUser = new User();
    private bool IsUserAuthenticated = false;
    private List<Collapse> CollapsesList = [];
    private AutoComplete<User> UserAutoComplete = default!;
    private string selectedUserName = string.Empty;



    protected override async Task OnInitializedAsync()
    {
        var auth = await authState.GetAuthenticationStateAsync();
        var user = auth.User;

        IsUserAuthenticated = user.Identity != null && user.Identity.IsAuthenticated;

        if (IsUserAuthenticated)
        {
            var roleName = user.FindFirst(c => c.Type == ClaimTypes.Role)?.Value;
            var netId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value ?? "No Netid";
            LoggedInUser = genService.GetModel<User>().FirstOrDefault(x => x.NetId == netId) ?? new User();
            LoggedInUser.Role = genService.GetModel<Role>().FirstOrDefault(r => r.Name == roleName) ?? new Role { Name = "No Role" };

        }
        CollapsesList.Add(UserPortalsCollapse);
        CollapsesList.Add(AdminPortalsCollapse);
    }

    #endregion


    #region UI
    private async Task<AutoCompleteDataProviderResult<User>> UserDataProvider(AutoCompleteDataProviderRequest<User> request)
    {
        var searchText = request.Filter?.Value?.ToString()?.ToLowerInvariant();

        var query = genService.GetModel<User>();

        if (!string.IsNullOrEmpty(searchText))
        {
            // Try parsing the search text as a date in the "mmddyyyy" format
            DateTime? parsedDate = null;
            if (DateTime.TryParseExact(searchText, "MMddyyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out var parsed))
            {
                parsedDate = DateTime.SpecifyKind(parsed.Date, DateTimeKind.Utc);
            }
            query = query.Where(u =>
                (!string.IsNullOrEmpty(u.Surname) && u.Surname.ToLower().Contains(searchText)) ||
                (!string.IsNullOrEmpty(u.RestOfName) && u.RestOfName.ToLower().Contains(searchText)) ||
                (!string.IsNullOrEmpty(u.PreferredFirstName) && u.PreferredFirstName.ToLower().Contains(searchText)) ||
                (!string.IsNullOrEmpty(u.ByuId) && u.ByuId.ToLower().Contains(searchText)) ||
                (!string.IsNullOrEmpty(u.NetId) && u.NetId.ToLower().Contains(searchText)) ||
                (parsedDate != null && u.DateOfBirth.Date == parsedDate.Value) // Match full birthday
            );
        }
        var filteredUsers = query.OrderBy(u => u.RestOfName);
        return await Task.FromResult(new AutoCompleteDataProviderResult<User> { Data = filteredUsers, TotalCount = filteredUsers.Count() });
    }

    private void SelectUser(User user)
    {
        if (user == null)
        {
            // Handle the case where no user is selected
            TargetUser = new User();
            selectedUserName = "Search for a user...";
            return;
        }
        TargetUser = user;
        if(!string.IsNullOrWhiteSpace(TargetUser.RestOfName + " " + TargetUser.Surname))
        {
            selectedUserName = TargetUser.RestOfName + " " + TargetUser.Surname;
            target.SetTargetUser(user);
        }
        else
        {
            selectedUserName = "Search for a user...";
        }
    }

    private async Task ShowProfileOffCanvas() => await ProfileOffCanvas.ShowAsync();

    private async Task ToggleUserPortals()
    {
        await UserPortalsCollapse.ToggleAsync();
    }

    private async Task ToggleAdminPortals()
    {
        await AdminPortalsCollapse.ToggleAsync();
    }


    private void NavigateToHome() => navigation.NavigateTo("/");
    private void NavToLogin() => navigation.NavigateTo("/Login");
    private void Logout() => navigation.NavigateTo("/Logout", forceLoad:true);
    #endregion


}
