@page "/portalOne"
@inject IGenService GenService

<h3>PortalOne</h3>


<h1>Spring 2025</h1>

@if (IsLoading)
{
    <div class="progress">
        <div class="progress-bar progress-bar-striped progress-bar-animated" style="width: 100%;">
            Loading...
        </div>
    </div>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Category</th>
                <th scope="col">Active</th>
                <th scope="col">Total</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th scope="row">Single Helaman</th>
                <td>@AllSingleActiveCountHL</td>
                <td></td>
            </tr>
            <tr>
                <th scope="row">Single Heritage</th>
                <td>@AllSingleActiveCountHR</td>
                <td></td>
            </tr>
            <tr>
                <th scope="row">Single Riviera</th>
                <td>@AllSingleActiveCountRI</td>
                <td></td>
            </tr>
            <tr>
                <th scope="row">Single Wyview Park</th>
                <td>@AllSingleActiveCountWP</td>
                <td></td>
            </tr>

        </tbody>
    </table>
}

@code {
    private bool IsLoading = true;


    private int AllSingleActiveCountHL;


    private int AllSingleActiveCountHR;


    private int AllSingleActiveCountRI;

    private int AllSingleActiveCountWP;




    protected override async Task OnInitializedAsync()
    {
        IsLoading = true; // Show loading bar
        await LoadMetrics();
        IsLoading = false; // Hide loading bar
    }

    private async Task LoadMetrics()
    {

        AllSingleActiveCountHL = await GenService.CountAsync<BlockTest>(bt => bt.AgreementPeriod == 3 && bt.Active == true && bt.OccupantType == 1 && bt.Area == 1 
            && bt.Sex == 1 && bt.Community == 1 && (bt.ContractingReqMet == 1 || bt.ContractingReqMet == 3));

        AllSingleActiveCountHR = await GenService.CountAsync<BlockTest>(bt => bt.AgreementPeriod == 3 && bt.Active == true && bt.OccupantType == 1 && bt.Area == 2
            && bt.Sex == 1 && bt.Community == 1 && (bt.ContractingReqMet == 1 || bt.ContractingReqMet == 3));

        AllSingleActiveCountRI = await GenService.CountAsync<BlockTest>(bt => bt.AgreementPeriod == 3 && bt.Active == true && bt.OccupantType == 1 && bt.Area == 3
            && bt.Sex == 1 && bt.Community == 1 && (bt.ContractingReqMet == 1 || bt.ContractingReqMet == 3));

        AllSingleActiveCountWP = await GenService.CountAsync<BlockTest>(bt => bt.AgreementPeriod == 3 && bt.Active == true && bt.OccupantType == 1 && bt.Area == 4
            && bt.Sex == 1 && bt.Community == 1 && (bt.ContractingReqMet == 1 || bt.ContractingReqMet == 3));
    }
}

