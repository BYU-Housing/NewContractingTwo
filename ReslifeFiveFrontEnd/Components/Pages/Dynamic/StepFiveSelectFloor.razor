@page "/stepFiveSelectFloor"
@inject IGenService GenService
@inject NavigationManager NavigationManager

<h1 style="text-align: center;">Contracting Portal</h1>
<!-- Progress Bar -->
<div class="progress mb-4">
    <div class="progress-bar"
         role="progressbar"
         style="width: 50%; background-color: #007bff;"
         aria-valuenow="5"
         aria-valuemin="0"
         aria-valuemax="10">
        Step 5 of 10
    </div>
</div>
<h5>Step 5 - Select your desired Floor</h5>
<p>
    Please select the floor that you would like to live in.
</p>

<!-- Display Floors with Total Allocations -->
<div class="container">
    @if (FloorsWithCounts.Any())
    {
        @foreach (var floor in FloorsWithCounts)
        {
            <div class="card mb-3">
                <div class="card-body d-flex justify-content-between align-items-center">
                    <div>
                        <span class="card-title">Floor @floor.Key</span>
                        <br />
                        <small>Available Allocations: @floor.Value</small>
                    </div>
                    <button class="btn btn-primary" @onclick="() => NavigateToStepSix(floor.Key)">Select</button>
                </div>
            </div>
        }
    }
    else
    {
        <p>No floors available for the selected building.</p>
    }
</div>

@code {
    private string UrlParametersString = string.Empty;
    private Dictionary<string, int> FloorsWithCounts = new();
    private int? BuildingId;
    private int? Area;
    private bool? SexAtBirth;
    private bool? Minor;
    private bool? Community;
    private bool? ReqMet;
    private int? AgreementPeriod;

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        // Combine all URL parameters into a single string
        UrlParametersString = string.Join("&", query.AllKeys.Select(key => $"{key}={query[key]}"));

        // Parse query parameters
        if (query["Area"] != null && int.TryParse(query["Area"], out var area)) Area = area;
        if (query["BuildingId"] != null && int.TryParse(query["BuildingId"], out var buildingId)) BuildingId = buildingId;
        if (query["SexAtBirth"] != null && bool.TryParse(query["SexAtBirth"], out var sexAtBirth)) SexAtBirth = sexAtBirth;
        if (query["Minor"] != null && bool.TryParse(query["Minor"], out var minor)) Minor = minor;
        if (query["Community"] != null && bool.TryParse(query["Community"], out var community)) Community = community;
        if (query["REQMet"] != null && bool.TryParse(query["REQMet"], out var reqMet)) ReqMet = reqMet;
        if (query["AgreementPeriod"] != null && int.TryParse(query["AgreementPeriod"], out var agreementPeriod)) AgreementPeriod = agreementPeriod;

        // Fetch the floor counts directly from the database
        FloorsWithCounts = await FetchFloorCountsAsync();
    }
    // private async Task<Dictionary<string, int>> FetchFloorCountsAsync()
    // {
    //     return await Task.Run(() =>
    //         GenService.GetModel<AllocationTest>()
    //             .Where(a =>
    //                 a.Active == true &&
    //                 a.Area == Area &&
    //                 a.Building == BuildingId &&
    //                 a.AgreementPeriod == AgreementPeriod &&
    //                 a.FreezeActivity == false &&
    //                 string.IsNullOrEmpty(a.TakenBy) &&
    //                 string.IsNullOrEmpty(a.OnHoldFor) &&
    //                 string.IsNullOrEmpty(a.RequestedRoommate) &&
    //                 a.GroupId == null &&
    //                 a.OccupantType == 1 &&
    //                 (!SexAtBirth.HasValue || a.Sex == SexAtBirth.Value) &&
    //                 (Minor == true ? a.Minor == true : true) &&
    //                 (Community == true ? a.NineteenPlus == true : a.EighteenMinus == true) &&
    //                 (ReqMet == true ? a.REQMet == true : a.REQNotMet == true)
    //             )
    //             .GroupBy(a => a.Floor != null ? a.Floor.ToString() : "Unknown") // Avoid null-propagating operator
    //             .Select(g => new { Floor = g.Key, Count = g.Count() })
    //             .ToDictionary(g => g.Floor, g => g.Count)
    //     );
    // }
    private async Task<Dictionary<string, int>> FetchFloorCountsAsync()
    {
        return await Task.Run(() =>
            GenService.GetModel<AllocationTest>()
                .Where(a =>
                    a.Active == true &&
                    a.Area == Area &&
                    a.Building == BuildingId &&
                    a.AgreementPeriod == AgreementPeriod &&
                    a.FreezeActivity == false &&
                    string.IsNullOrEmpty(a.TakenBy) &&
                    string.IsNullOrEmpty(a.OnHoldFor) &&
                    string.IsNullOrEmpty(a.RequestedRoommate) &&
                    a.GroupId == null &&
                    a.OccupantType == 1 &&
                    (!SexAtBirth.HasValue || a.Sex == SexAtBirth.Value) &&
                    (Minor == true ? a.Minor == true : true) &&
                    (Community == true ? a.NineteenPlus == true : a.EighteenMinus == true) &&
                    (ReqMet == true ? a.REQMet == true : a.REQNotMet == true)
                )
                .GroupBy(a => a.Floor != null ? a.Floor.ToString()! : "Unknown") // Ensure Floor is non-null
                .Select(g => new { Floor = g.Key, Count = g.Count() })
                .ToDictionary(g => g.Floor!, g => g.Count) // Ensure Floor is non-null in the dictionary
        );
    }


    private void NavigateToStepSix(string floor)
    {
        // Construct query string with the selected floor
        var queryParams = $"{UrlParametersString}&Floor={floor}";
        NavigationManager.NavigateTo($"/stepSixSelectBedspace?{queryParams}");
    }
}
