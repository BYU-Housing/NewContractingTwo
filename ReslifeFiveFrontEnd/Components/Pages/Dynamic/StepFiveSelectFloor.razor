@page "/stepFiveSelectFloor"
@inject IGenService GenService
@inject NavigationManager NavigationManager

<h1 style="text-align: center;">Contracting Portal</h1>
<!-- Progress Bar -->
<div class="progress mb-4">
    <div class="progress-bar"
         role="progressbar"
         style="width: 50%; background-color: #007bff;"
         aria-valuenow="5"
         aria-valuemin="0"
         aria-valuemax="10">
        Step 5 of 10
    </div>
</div>
<h5>Step 5 - Select your desired Floor</h5>
<p>
    Please select the floor that you would like to live in.
</p>

<!-- Display Floors with Total Allocations -->
<div class="container">
    @if (FloorsWithCounts.Any())
    {
        @foreach (var floor in FloorsWithCounts)
        {
            <div class="card mb-3">
                <div class="card-body d-flex justify-content-between align-items-center">
                    <div>
                        <span class="card-title">Floor @floor.Key</span>
                        <br />
                        <small>Available Allocations: @floor.Value</small>
                    </div>
                    <button class="btn btn-primary" @onclick="() => NavigateToStepSix(floor.Key)">Select</button>
                </div>
            </div>
        }
    }
    else
    {
        <p>No floors available for the selected building.</p>
    }
</div>

<!-- Display URL Parameters as a String -->
<div class="mt-4">
    <h4>URL Parameters</h4>
    <p>@UrlParametersString</p>
</div>

@code {
    private string UrlParametersString = string.Empty;
    private Dictionary<string, int> FloorsWithCounts = new();
    private int? BuildingId;
    private List<AllocationTest> AllocationTests = new();

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        // Combine all URL parameters into a single string
        UrlParametersString = string.Join("&", query.AllKeys.Select(key => $"{key}={query[key]}"));

        // Parse the BuildingId parameter
        if (query["BuildingId"] != null && int.TryParse(query["BuildingId"], out var buildingId))
        {
            BuildingId = buildingId;
        }

        // Load AllocationTests and calculate floor counts
        AllocationTests = GenService.GetModel<AllocationTest>().Where(a => a.Building == BuildingId).ToList();
        SetFloorsWithCounts();
    }

    private void SetFloorsWithCounts()
    {
        FloorsWithCounts = AllocationTests
            .GroupBy(a => a.Floor?.ToString() ?? "Unknown")
            .ToDictionary(g => g.Key, g => g.Count());
    }


    private void NavigateToStepSix(string floor)
    {
        // Construct query string with the selected floor
        var queryParams = $"{UrlParametersString}&Floor={floor}";
        NavigationManager.NavigateTo($"/stepSixSelectBedspace?{queryParams}");
    }
}

