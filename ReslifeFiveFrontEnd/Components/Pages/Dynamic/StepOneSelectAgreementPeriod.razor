@page "/selectAgreementPeriod"
@inject IGenService GenService
@inject NavigationManager NavigationManager

<h3>Select Agreement Period</h3>

<!-- Top Section: Dynamic Agreement Period Blocks -->
<div class="mb-4">
    @foreach (var period in AllPossibleAgreementPeriods)
    {
        var isSelected = SelectedAgreementPeriod == period.Key;
        var isAvailable = AgreementPeriods.ContainsKey(period.Key);

        <div class="card mb-2" style="width: 100%; opacity: @(isAvailable ? "1" : "0.5"); border: @(isSelected ? "3px solid blue" : "1px solid gray");">
            <div class="card-body d-flex justify-content-between align-items-center">
                <h6 class="mb-0">@period.Value.Name</h6>
                <span>@period.Value.DateRange</span>
                @if (isAvailable)
                {
                    <button class="btn btn-primary" @onclick="() => OnAgreementPeriodSelected(period.Key)" disabled="@isSelected">
                        @(isSelected ? "Selected" : "Select")
                    </button>
                }
                else
                {
                    <button class="btn btn-secondary" disabled>Unavailable</button>
                }
            </div>
        </div>
    }
</div>


<!-- Additional Section: URL Parameters as String -->
<div class="mt-4">
    <h4 style="opacity: 0.1;">URL Parameters String</h4>
    <p style="opacity: 0.1;">@UrlParametersString</p>
</div>

<button class="btn btn-primary mt-3" @onclick="NavigateBack">Back</button>

<h3 class="text-center">Matching Allocation Tests</h3>

@if (MatchingAllocations != null && MatchingAllocations.Any())
{
    <div class="mt-4">
        @foreach (var allocation in MatchingAllocations)
        {
            <div class="card mb-3 w-100" style="border: 1px solid #ccc;">
                <div class="card-body">
                    <p class="card-text">
                        Bedspace: <strong>@allocation.Bedspace</strong>
                    </p>
                    <p class="card-text">
                        Active: <strong>@(allocation.Active == true ? "Yes" : "No")</strong>
                    </p>
                    <div class="button-container">
                        <button class="btn btn-primary uniform-button">
                            Cancel My Agreement
                        </button>
                        <button class="btn btn-primary uniform-button">
                            Seeking Replacement
                        </button>
                        <button class="btn btn-primary uniform-button">
                            Seeking Swap
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
@*     <div class="text-center mt-4">
        <p>No rows</p>
    </div> *@
}
<h3 class="text-center">Allocations On Hold For You</h3>

@if (OnHoldAllocations != null && OnHoldAllocations.Any())
{
    <div class="mt-4">
        @foreach (var allocation in OnHoldAllocations)
        {
            <div class="card mb-3 w-100" style="border: 1px solid #ccc;">
                <div class="card-body">
                    <p class="card-text">
                        The Bedspace: <strong>@allocation.Bedspace</strong> has been placed on an administrative hold for you. You have 24 hours to accept this hold before it will expire and be offered to someone else. 
                    </p>

@*                     <div class="button-container">
                        <button class="btn btn-primary uniform-button">
                            Accept Hold
                        </button>
                        <button class="btn btn-primary uniform-button">
                            Decline Hold
                        </button>

                    </div> *@
                    <div class="button-container">
                        <button class="btn btn-success uniform-button">
                            Accept Hold
                        </button>
                        <button class="btn btn-danger uniform-button">
                            Decline Hold
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="text-center mt-4">
        <p>No allocations on hold for you.</p>
    </div>
}



<style>
    .button-container {
        display: flex;
        justify-content: space-between; /* Ensures even spacing between buttons */
        gap: 10px; /* Additional space between buttons */
    }

    .uniform-button {
        flex: 1; /* Ensures all buttons are the same size */
        min-width: 120px; /* Minimum width for the buttons */
        text-align: center; /* Centers text inside the buttons */
    }

    .btn-success {
        background-color: #28a745; /* Green */
        border-color: #28a745; /* Green border */
    }

        .btn-success:hover {
            background-color: #218838; /* Darker green on hover */
            border-color: #1e7e34;
        }

    .btn-danger {
        background-color: #dc3545; /* Red */
        border-color: #dc3545; /* Red border */
    }

        .btn-danger:hover {
            background-color: #c82333; /* Darker red on hover */
            border-color: #bd2130;
        }
</style>





@code {
    private Dictionary<int, (string Name, string DateRange)> AllPossibleAgreementPeriods = new()
    {
        { 3, ("Fall Winter 2024 - 2025", "August 28, 2024 - April 26, 2025") },
        { 4, ("Winter 2025", "January 6, 2025 - April 26, 2025") },
        { 5, ("Spring 2025", "April 26, 2025 - June 21, 2025") },
        { 6, ("Summer 2025", "June 21, 2025 - August 15, 2025") },
        { 7, ("Fall Winter 2025", "August 27, 2025 - April 25, 2026") }
    };
    private Dictionary<int, string> AgreementPeriods = new();
    private Dictionary<string, string?> UrlParameters = new Dictionary<string, string?>();
    // private HashSet<string> DateFields = new() { "HelamanPriorityDate", "HeritagePriorityDate", "WyviewParkPriorityDate", "RivieraPriorityDate" };
    private int? SelectedAgreementPeriod;

    private string UrlParametersString => string.Join(", ", UrlParameters.Select(p => $"{p.Key}={p.Value ?? "null"}"));

    private List<AllocationTest> MatchingAllocations = new();
    private string? NetId;
    private List<AllocationTest> OnHoldAllocations = new();

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        foreach (string key in query.Keys)
        {
            if (!string.IsNullOrEmpty(key))
            {
                UrlParameters[key] = query[key];

                // Capture NetId from the URL
                if (key == "NetID")
                {
                    NetId = query[key];
                }

                // Capture AgreementPeriod from the URL
                if (key == "AgreementPeriod" && int.TryParse(query[key], out var agreementPeriod))
                {
                    UrlParameters["AgreementPeriod"] = agreementPeriod.ToString();
                }
            }
        }

        // Fetch AllocationTest rows where NetId matches the URL parameter
        LoadMatchingAllocations();
        LoadOnHoldAllocations();
        if (UrlParameters.TryGetValue("AgreementPeriod", out var periodValue) && !string.IsNullOrWhiteSpace(periodValue))
        {
            foreach (var period in periodValue.Split(','))
            {
                if (int.TryParse(period, out var periodId))
                {
                    AgreementPeriods[periodId] = AllPossibleAgreementPeriods.TryGetValue(periodId, out var description)
                        ? description.Name
                        : "Unknown Agreement Period";
                }
            }
        }
    }

    private void LoadMatchingAllocations()
    {
        if (!string.IsNullOrEmpty(NetId) && UrlParameters.TryGetValue("AgreementPeriod", out var agreementPeriodStr) && int.TryParse(agreementPeriodStr, out var agreementPeriod))
        {
            MatchingAllocations = GenService.GetModel<AllocationTest>()
                                            .Where(a => a.TakenBy == NetId
                                                        && a.AgreementPeriod == agreementPeriod
                                                        && a.Active == true)
                                            .ToList();
        }
        else if (!string.IsNullOrEmpty(NetId))
        {
            MatchingAllocations = GenService.GetModel<AllocationTest>()
                                            .Where(a => a.TakenBy == NetId && a.Active == true)
                                            .ToList();
        }
        else
        {
            MatchingAllocations.Clear(); // No valid filtering parameters
        }
    }

    private void LoadOnHoldAllocations()
    {
        if (!string.IsNullOrEmpty(NetId))
        {
            OnHoldAllocations = GenService.GetModel<AllocationTest>()
                                          .Where(a => a.OnHoldFor == NetId && a.Active == true)
                                          .ToList();
        }
        else
        {
            OnHoldAllocations.Clear(); // No valid filtering parameters
        }
    }

    private void OnAgreementPeriodSelected(int periodId)
    {
        SelectedAgreementPeriod = periodId;

        if (AllPossibleAgreementPeriods.TryGetValue(periodId, out var periodDetails))
        {
            var dates = periodDetails.DateRange.Split('-').Select(d => DateTime.Parse(d.Trim())).ToArray();
            if (dates.Length == 2)
            {
                var startDate = dates[0].ToString("yyyy-MM-ddTHH:mm:ss");
                var endDate = dates[1].ToString("yyyy-MM-ddTHH:mm:ss");

                UrlParameters["AgreementPeriod"] = periodId.ToString();
                UrlParameters["AgreementStartDate"] = startDate;
                UrlParameters["AgreementEndDate"] = endDate;
            }
        }

        var queryParams = string.Join("&", UrlParameters.Select(p => $"{Uri.EscapeDataString(p.Key)}={Uri.EscapeDataString(p.Value ?? string.Empty)}"));
        NavigationManager.NavigateTo($"/selectStartDate?{queryParams}");
    }

    private void NavigateBack()
    {
        var queryParams = string.Join("&", UrlParameters.Select(p => $"{Uri.EscapeDataString(p.Key)}={Uri.EscapeDataString(p.Value ?? string.Empty)}"));
        NavigationManager.NavigateTo($"/createTestUser?{queryParams}");
    }




}
