@page "/selectAgreementPeriod"
@inject IGenService GenService
@inject NavigationManager NavigationManager

<h3>Select Agreement Period</h3>

<!-- Top Section: Dynamic Agreement Period Blocks -->
<div class="mb-4">
    @foreach (var period in AllPossibleAgreementPeriods)
    {
        var isSelected = SelectedAgreementPeriod == period.Key;
        var isAvailable = AgreementPeriods.ContainsKey(period.Key);

        <div class="card mb-2" style="width: 100%; opacity: @(isAvailable ? "1" : "0.5"); border: @(isSelected ? "3px solid blue" : "1px solid gray");">
            <div class="card-body d-flex justify-content-between align-items-center">
                <h6 class="mb-0">@period.Value.Name</h6>
                <span>@period.Value.DateRange</span>
                @if (isAvailable)
                {
                    <button class="btn btn-primary" @onclick="() => OnAgreementPeriodSelected(period.Key)" disabled="@isSelected">
                        @(isSelected ? "Selected" : "Select")
                    </button>
                }
                else
                {
                    <button class="btn btn-secondary" disabled>Unavailable</button>
                }
            </div>
        </div>
    }
</div>

<h3>Hidden Developer Notes</h3>
<!-- Bottom Section: URL Parameters Table -->
<div class="row">
    <div class="col-md-12">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Parameter Name</th>
                    <th>Value</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var param in UrlParameters)
                {
                    <tr>
                        <td>@GetFormattedParameterName(param.Key)</td>
                        <td>
                            @if (param.Key == "AgreementPeriod" && int.TryParse(param.Value, out var period))
                            {
                                @GetAgreementPeriodDescription(period)
                            }
                            else if ((param.Key == "SexAtBirth" || param.Key == "Community") && bool.TryParse(param.Value, out var booleanValue))
                            {
                                @GetBooleanDescription(param.Key, booleanValue)
                            }
                            else if (DateFields.Contains(param.Key) && DateTime.TryParse(param.Value, out var dateValue))
                            {
                                @dateValue.ToString("yyyy-MM-dd HH:mm:ss")
                            }
                            else
                            {
                                @param.Value
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<button class="btn btn-primary mt-3" @onclick="NavigateBack">Back</button>

@code {
    private Dictionary<int, (string Name, string DateRange)> AllPossibleAgreementPeriods = new()
    {
        { 3, ("Fall Winter 2024 - 2025", "August 28, 2024 - April 26, 2025") },
        { 4, ("Winter 2025", "January 6, 2025 - April 26, 2025") },
        { 5, ("Spring 2025", "April 26, 2025 - June 21, 2025") },
        { 6, ("Summer 2025", "June 21, 2025 - August 15, 2025") },
        { 7, ("Fall Winter 2025", "August 27, 2025 - April 25, 2026") }
    };
    private Dictionary<int, string> AgreementPeriods = new();
    private Dictionary<string, string?> UrlParameters = new Dictionary<string, string?>();
    private HashSet<string> DateFields = new() { "HelamanPriorityDate", "HeritagePriorityDate", "WyviewParkPriorityDate", "RivieraPriorityDate" };
    private int? SelectedAgreementPeriod;

    protected override void OnInitialized()
    {
        // Parse the query string from the URL
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        foreach (string key in query.Keys)
        {
            if (!string.IsNullOrEmpty(key))
            {
                UrlParameters[key] = query[key];
            }
        }

        // Extract and parse agreement periods
        if (UrlParameters.TryGetValue("AgreementPeriod", out var periodValue) && !string.IsNullOrWhiteSpace(periodValue))
        {
            foreach (var period in periodValue.Split(','))
            {
                if (int.TryParse(period, out var periodId))
                {
                    AgreementPeriods[periodId] = AllPossibleAgreementPeriods.TryGetValue(periodId, out var description)
                        ? description.Name
                        : "Unknown Agreement Period";
                }
            }
        }
    }

    private string GetAgreementPeriodDescription(int agreementPeriod)
    {
        return AllPossibleAgreementPeriods.TryGetValue(agreementPeriod, out var description)
            ? description.Name
            : "Unknown Agreement Period";
    }

    private string GetBooleanDescription(string key, bool value)
    {
        return key switch
        {
            "SexAtBirth" => value ? "Female" : "Male",
            "Community" => value ? "19+" : "18-",
            _ => value ? "True" : "False"
        };
    }

    private string GetFormattedParameterName(string key)
    {
        return key.Replace("PriorityDate", " Priority Date")
                  .Replace("SexAtBirth", "Sex At Birth")
                  .Replace("AgreementPeriod", "Agreement Period")
                  .Replace("Community", "Community")
                  .Replace("Eligible", "Eligible")
                  .Replace("REQMet", "Requirement Met")
                  .Replace("ESA", "Emotional Support Animal")
                  .Replace("Scholarship", "Scholarship");
    }

    private void OnAgreementPeriodSelected(int periodId)
    {
        SelectedAgreementPeriod = periodId;
        var queryParams = string.Join("&", UrlParameters.Select(p => $"{Uri.EscapeDataString(p.Key)}={Uri.EscapeDataString(p.Value ?? string.Empty)}"));
        NavigationManager.NavigateTo($"/selectStartDate?{queryParams}");
    }

    private void NavigateBack()
    {
        var queryParams = string.Join("&", UrlParameters.Select(p => $"{Uri.EscapeDataString(p.Key)}={Uri.EscapeDataString(p.Value ?? string.Empty)}"));
        NavigationManager.NavigateTo($"/createTestUser?{queryParams}");
    }
}
