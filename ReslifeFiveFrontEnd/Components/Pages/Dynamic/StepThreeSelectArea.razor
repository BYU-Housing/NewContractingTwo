@page "/stepThreeSelectArea"
@inject IGenService GenService
@inject NavigationManager NavigationManager

<h3>Step Three Select Area</h3>

<!-- Helaman Halls Block -->
<div class="row justify-content-center mb-4">
    <div class="col-md-10">
        <div class="card">
            <div class="card-header text-center">
                <h4>@AccessMessage</h4>
            </div>
            <div class="row no-gutters">
                <div class="col-md-4 text-center">
                    <img src="https://reslife-pictures.s3.us-east-1.amazonaws.com/contracting/HL.jpg" class="img-fluid" alt="Helaman Halls Image">
                    <h2 class="card-title mt-2">Helaman Halls</h2>
                    <div style="text-align: left; margin-left: 0; padding-left: 0;">
                        @if (AllocationTests == null)
                        {
                            <small>Calculating totals...</small>
                        }
                        else
                        {
                            <small>Total: @AllocationTests.Count(a => a.Area == 1 && a.AgreementPeriod == AgreementPeriod)</small>
                            <br />
                            <small>Available (@GetActiveCount(1) Active)</small>
                            <br />
                            <small>Swappable (@GetSwappableCount(1) Swappable)</small>
                            <br />
                            <small>Seeking Replacement (@GetSeekingReplacementCount(1))</small>
                        }
                    </div>
                </div>
                <div class="col-md-8">
                    <div class="card-body">
                        <p>
                            Helaman Halls caters to full-time day continuing students with various room options.
                            The housing area is divided into communities based on age, accommodating recent high
                            school graduates as well as older students. The environment upholds the honor code and
                            gospel-centered community standards.
                        </p>
                        <div class="text-center mt-3">
                            <button class="btn btn-primary" @onclick="NavigateToStepFourSelectBuilding" disabled="@IsHelamanButtonDisabled">Go to Step Four: Select Building</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Heritage Halls Block -->
<div class="row justify-content-center mb-4">
    <div class="col-md-10">
        <div class="card">
            <div class="card-header text-center">
                <h4>@HeritageAccessMessage</h4>
            </div>
            <div class="row no-gutters">
                <div class="col-md-4 text-center">
                    <img src="https://reslife-pictures.s3.us-east-1.amazonaws.com/contracting/HR.jpg" class="img-fluid" alt="Heritage Halls Image">
                    <h2 class="card-title mt-2">Heritage Halls</h2>
                    <div style="text-align: left; margin-left: 0; padding-left: 0;">
                        @if (AllocationTests == null)
                        {
                            <small>Calculating totals...</small>
                        }
                        else
                        {
                            <small>Total: @AllocationTests.Count(a => a.Area == 2 && a.AgreementPeriod == AgreementPeriod)</small>
                            <br />
                            <small>Available (@GetActiveCount(2) Active)</small>
                            <br />
                            <small>Swappable (@GetSwappableCount(2) Swappable)</small>
                            <br />
                            <small>Seeking Replacement (@GetSeekingReplacementCount(2))</small>
                        }
                    </div>
                </div>
                <div class="col-md-8">
                    <div class="card-body">
                        <p>
                            Heritage Halls offers student housing options tailored to age groups and academic needs.
                            It fosters a supportive, honor-code-abiding environment for BYU students.
                        </p>
                        <div class="text-center mt-3">
                            <button class="btn btn-primary" @onclick="NavigateToStepFourSelectBuilding" disabled="@IsHeritageButtonDisabled">Go to Step Four: Select Building</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Riviera Block -->
<div class="row justify-content-center mb-4">
    <div class="col-md-10">
        <div class="card">
            <div class="card-header text-center">
                <h4>@RivieraAccessMessage</h4>
            </div>
            <div class="row no-gutters">
                <div class="col-md-4 text-center">
                    <img src="https://reslife-pictures.s3.us-east-1.amazonaws.com/contracting/RI.jpg" class="img-fluid" alt="Riviera Image">
                    <h2 class="card-title mt-2">The Riviera</h2>
                    <div style="text-align: left; margin-left: 0; padding-left: 0;">
                        @if (AllocationTests == null)
                        {
                            <small>Calculating totals...</small>
                        }
                        else
                        {
                            <small>Total: @AllocationTests.Count(a => a.Area == 3 && a.AgreementPeriod == AgreementPeriod)</small>
                            <br />
                            <small>Available (@GetActiveCount(3) Active)</small>
                            <br />
                            <small>Swappable (@GetSwappableCount(3) Swappable)</small>
                            <br />
                            <small>Seeking Replacement (@GetSeekingReplacementCount(3))</small>
                        }
                    </div>
                </div>
                <div class="col-md-8">
                    <div class="card-body">
                        <p>
                            The Riviera provides high-quality housing and recreational facilities, adhering to
                            gospel-centered values and standards.
                        </p>
                        <div class="text-center mt-3">
                            <button class="btn btn-primary" @onclick="NavigateToStepFourSelectBuilding" disabled="@IsRivieraButtonDisabled">Go to Step Four: Select Building</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Wyview Park Block -->
<div class="row justify-content-center mb-4">
    <div class="col-md-10">
        <div class="card">
            <div class="card-header text-center">
                <h4>@WyviewAccessMessage</h4>
            </div>
            <div class="row no-gutters">
                <div class="col-md-4 text-center">
                    <img src="https://reslife-pictures.s3.us-east-1.amazonaws.com/contracting/WP.jpg" class="img-fluid" alt="Wyview Park Image">
                    <h2 class="card-title mt-2">Wyview Park</h2>
                    <div style="text-align: left; margin-left: 0; padding-left: 0;">
                        @if (AllocationTests == null)
                        {
                            <small>Calculating totals...</small>
                        }
                        else
                        {
                            <small>Total: @AllocationTests.Count(a => a.Area == 4 && a.AgreementPeriod == AgreementPeriod)</small>
                            <br />
                            <small>Available (@GetActiveCount(4) Active)</small>
                            <br />
                            <small>Swappable (@GetSwappableCount(4) Swappable)</small>
                            <br />
                            <small>Seeking Replacement (@GetSeekingReplacementCount(4))</small>
                        }
                    </div>
                </div>
                <div class="col-md-8">
                    <div class="card-body">
                        <p>
                            Wyview Park offers a quiet and independent living environment for students.
                            It features spacious apartments with modern amenities and a family-friendly atmosphere.
                        </p>
                        <div class="text-center mt-3">
                            <button class="btn btn-primary" @onclick="NavigateToStepFourSelectBuilding" disabled="@IsWyviewButtonDisabled">Go to Step Four: Select Building</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Dictionary<string, string?> UrlParameters = new Dictionary<string, string?>();
    private List<AllocationTest> AllocationTests { get; set; } = new List<AllocationTest>();
    private int AgreementPeriod = 0;

    private string AccessMessage = "You do not have access";
    private string HeritageAccessMessage = "You do not have access";
    private string RivieraAccessMessage = "You do not have access";
    private string WyviewAccessMessage = "You do not have access";

    private DateTime? HelamanPriorityDate;
    private DateTime? HeritagePriorityDate;
    private DateTime? RivieraPriorityDate;
    private DateTime? WyviewPriorityDate;

    private bool IsHelamanButtonDisabled => !IsHelamanAccessGranted;
    private bool IsHeritageButtonDisabled => !IsHeritageAccessGranted;
    private bool IsRivieraButtonDisabled => !IsRivieraAccessGranted;
    private bool IsWyviewButtonDisabled => !IsWyviewAccessGranted;

    private bool IsHelamanAccessGranted = false;
    private bool IsHeritageAccessGranted = false;
    private bool IsRivieraAccessGranted = false;
    private bool IsWyviewAccessGranted = false;

    private System.Threading.Timer? _timerHelaman;
    private System.Threading.Timer? _timerHeritage;
    private System.Threading.Timer? _timerRiviera;
    private System.Threading.Timer? _timerWyview;

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        foreach (string key in query.Keys)
        {
            if (!string.IsNullOrEmpty(key))
            {
                UrlParameters[key] = query[key];
            }
        }

        if (UrlParameters.ContainsKey("AgreementPeriod") &&
            int.TryParse(UrlParameters["AgreementPeriod"], out var agreementPeriod))
        {
            AgreementPeriod = agreementPeriod;
        }

        await LoadAllocationTestsAsync();

        if (UrlParameters.ContainsKey("HelamanPriorityDate") &&
            DateTime.TryParse(UrlParameters["HelamanPriorityDate"], out var helamanPriorityDate))
        {
            HelamanPriorityDate = helamanPriorityDate;
            StartCountdownForHelaman();
        }

        if (UrlParameters.ContainsKey("HeritagePriorityDate") &&
            DateTime.TryParse(UrlParameters["HeritagePriorityDate"], out var heritagePriorityDate))
        {
            HeritagePriorityDate = heritagePriorityDate;
            StartCountdownForHeritage();
        }

        if (UrlParameters.ContainsKey("RivieraPriorityDate") &&
            DateTime.TryParse(UrlParameters["RivieraPriorityDate"], out var rivieraPriorityDate))
        {
            RivieraPriorityDate = rivieraPriorityDate;
            StartCountdownForRiviera();
        }

        if (UrlParameters.ContainsKey("WyviewPriorityDate") &&
            DateTime.TryParse(UrlParameters["WyviewPriorityDate"], out var wyviewPriorityDate))
        {
            WyviewPriorityDate = wyviewPriorityDate;
            StartCountdownForWyview();
        }
    }

    private async Task LoadAllocationTestsAsync()
    {
        AllocationTests = await Task.Run(() => GenService.GetModel<AllocationTest>().ToList());
    }

    private void StartCountdownForHelaman()
    {
        _timerHelaman = new System.Threading.Timer(UpdateCountdownHelaman, null, 0, 1000);
    }

    private void UpdateCountdownHelaman(object? state)
    {
        if (HelamanPriorityDate.HasValue)
        {
            var now = DateTime.UtcNow;
            var remaining = HelamanPriorityDate.Value - now;

            if (remaining <= TimeSpan.Zero)
            {
                AccessMessage = "You have access";
                IsHelamanAccessGranted = true;
                _timerHelaman?.Dispose();
            }
            else
            {
                AccessMessage = $"Helaman Halls: You do not have access. Time remaining: {remaining.Days} days, {remaining.Hours} hours, {remaining.Minutes} minutes, {remaining.Seconds} seconds.";
            }

            InvokeAsync(() => StateHasChanged());
        }
    }

    private void StartCountdownForHeritage()
    {
        _timerHeritage = new System.Threading.Timer(UpdateCountdownHeritage, null, 0, 1000);
    }

    private void UpdateCountdownHeritage(object? state)
    {
        if (HeritagePriorityDate.HasValue)
        {
            var now = DateTime.UtcNow;
            var remaining = HeritagePriorityDate.Value - now;

            if (remaining <= TimeSpan.Zero)
            {
                HeritageAccessMessage = "You have access";
                IsHeritageAccessGranted = true;
                _timerHeritage?.Dispose();
            }
            else
            {
                HeritageAccessMessage = $"Heritage Halls: You do not have access. Time remaining: {remaining.Days} days, {remaining.Hours} hours, {remaining.Minutes} minutes, {remaining.Seconds} seconds.";
            }

            InvokeAsync(() => StateHasChanged());
        }
    }

    private void StartCountdownForRiviera()
    {
        _timerRiviera = new System.Threading.Timer(UpdateCountdownRiviera, null, 0, 1000);
    }

    private void UpdateCountdownRiviera(object? state)
    {
        if (RivieraPriorityDate.HasValue)
        {
            var now = DateTime.UtcNow;
            var remaining = RivieraPriorityDate.Value - now;

            if (remaining <= TimeSpan.Zero)
            {
                RivieraAccessMessage = "You have access";
                IsRivieraAccessGranted = true;
                _timerRiviera?.Dispose();
            }
            else
            {
                RivieraAccessMessage = $"The Riviera: You do not have access. Time remaining: {remaining.Days} days, {remaining.Hours} hours, {remaining.Minutes} minutes, {remaining.Seconds} seconds.";
            }

            InvokeAsync(() => StateHasChanged());
        }
    }

    private void StartCountdownForWyview()
    {
        _timerWyview = new System.Threading.Timer(UpdateCountdownWyview, null, 0, 1000);
    }

    private void UpdateCountdownWyview(object? state)
    {
        if (WyviewPriorityDate.HasValue)
        {
            var now = DateTime.UtcNow;
            var remaining = WyviewPriorityDate.Value - now;

            if (remaining <= TimeSpan.Zero)
            {
                WyviewAccessMessage = "You have access";
                IsWyviewAccessGranted = true;
                _timerWyview?.Dispose();
            }
            else
            {
                WyviewAccessMessage = $"Wyview Park: You do not have access. Time remaining: {remaining.Days} days, {remaining.Hours} hours, {remaining.Minutes} minutes, {remaining.Seconds} seconds.";
            }

            InvokeAsync(() => StateHasChanged());
        }
    }

    private int GetActiveCount(int area)
    {
        return AllocationTests?.Count(a => a.Active == true && a.Area == area && a.AgreementPeriod == AgreementPeriod) ?? 0;
    }

    private int GetSwappableCount(int area)
    {
        return AllocationTests?.Count(a => a.Active == true && a.Swappable == true && a.Area == area && a.AgreementPeriod == AgreementPeriod) ?? 0;
    }

    private int GetSeekingReplacementCount(int area)
    {
        return AllocationTests?.Count(a => a.Active == true && a.SeekingReplacement == true && a.Area == area && a.AgreementPeriod == AgreementPeriod) ?? 0;
    }

    private void NavigateToStepFourSelectBuilding()
    {
        NavigationManager.NavigateTo("/stepFourSelectBuilding");
    }

    public void Dispose()
    {
        _timerHelaman?.Dispose();
        _timerHeritage?.Dispose();
        _timerRiviera?.Dispose();
        _timerWyview?.Dispose();
    }
}
