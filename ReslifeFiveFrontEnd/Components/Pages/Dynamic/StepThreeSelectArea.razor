@page "/stepThreeSelectArea"
@inject IGenService GenService
@inject NavigationManager NavigationManager

<h3>Step Three Select Area</h3>

<!-- Helaman Halls Block -->
<div class="row justify-content-center mb-4">
    <div class="col-md-10">
        <div class="card">
            <div class="card-header text-center">
                <h4>@AccessMessage</h4>
            </div>
            <div class="row no-gutters">
                <!-- Image Section -->
                <div class="col-md-4 text-center">
                    <img src="https://reslife-pictures.s3.us-east-1.amazonaws.com/contracting/HL.jpg" class="img-fluid" alt="Helaman Halls Image">
                    <h2 class="card-title mt-2">Helaman Halls</h2>

                    <!-- Available Allocations -->
                    <div style="text-align: left; margin-left: 0; padding-left: 0;">
                        @if (AllocationTests == null)
                        {
                            <small>Calculating totals...</small>
                        }
                        else
                        {
                            <small>Total: @AllocationTests.Count(a => a.Area == 1)</small>
                            <br />
                            <small>Available (@GetActiveCount(1) Active)</small>
                            <br />
                            <small>Swappable (@GetSwappableCount(1) Swappable)</small>
                            <br />
                            <small>Seeking Replacement (@GetSeekingReplacementCount(1))</small>
                        }
                    </div>

                    <!-- Navigation Button -->
                    <div class="text-center mt-3">
                        <button class="btn btn-primary" @onclick="NavigateToStepFourSelectBuilding">Go to Step Four: Select Building</button>
                    </div>
                </div>
                <!-- Text Section -->
                <div class="col-md-8">
                    <div class="card-body">
                        <p>
                            Helaman Halls caters to full-time day continuing students with various room options.
                            The housing area is divided into communities based on age, accommodating recent high
                            school graduates as well as older students. The environment upholds the honor code and
                            gospel-centered community standards. The housing options include shared rooms with sinks,
                            shared suites, and single suites, each furnished with essential amenities. Amenities such
                            as the Cannon Commons, laundry facilities, on-site parking, and recreational spaces add to
                            the convenience and comfort. Rental payments encompass utilities, internet access, and
                            Residence Life activities, fostering a holistic living experience for residents.
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Heritage Halls Block -->
<div class="row justify-content-center mb-4">
    <div class="col-md-10">
        <div class="card">
            <div class="card-header text-center">
                <h4>@HeritageAccessMessage</h4>
            </div>
            <div class="row no-gutters">
                <!-- Image Section -->
                <div class="col-md-4 text-center">
                    <img src="https://reslife-pictures.s3.us-east-1.amazonaws.com/contracting/HR.jpg" class="img-fluid" alt="Heritage Halls Image">
                    <h2 class="card-title mt-2">Heritage Halls</h2>

                    <!-- Available Allocations -->
                    <div style="text-align: left; margin-left: 0; padding-left: 0;">
                        @if (AllocationTests == null)
                        {
                            <small>Calculating totals...</small>
                        }
                        else
                        {
                            <small>Total: @AllocationTests.Count(a => a.Area == 2)</small>
                            <br />
                            <small>Available (@GetActiveCount(2) Active)</small>
                            <br />
                            <small>Swappable (@GetSwappableCount(2) Swappable)</small>
                            <br />
                            <small>Seeking Replacement (@GetSeekingReplacementCount(2))</small>
                        }
                    </div>

                    <!-- Navigation Button -->
                    <div class="text-center mt-3">
                        <button class="btn btn-primary" @onclick="NavigateToStepFourSelectBuilding">Go to Step Four: Select Building</button>
                    </div>
                </div>
                <!-- Text Section -->
                <div class="col-md-8">
                    <div class="card-body">
                        <p>
                            Heritage Halls, tailored for full-time day continuing students, presents an array of accommodations.
                            The community adheres to credit hour requirements, with special provisions for Spring and Summer Terms.
                            Tenants dwell in age-specific communities, including the 18 and Under Community and the 19 and Over Community.
                            Embracing the honor code and gospel-centered ideals, Heritage Halls fosters a supportive environment.
                            Housing options comprise shared rooms with amenities like three shared bedrooms, private desks, and kitchen appliances.
                            Single rooms with similar amenities are also available. Various services encompass meal plans, kitchen facilities, laundry,
                            parking, and recreational spaces, offering a comprehensive student living experience.
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Dictionary<string, string?> UrlParameters = new Dictionary<string, string?>();
    private string AccessMessage = "You do not have access";
    private string HeritageAccessMessage = "You do not have access";
    private DateTime? HelamanPriorityDate;
    private DateTime? HeritagePriorityDate;
    private System.Threading.Timer? _timerHelaman;
    private System.Threading.Timer? _timerHeritage;
    private List<AllocationTest> AllocationTests { get; set; } = new List<AllocationTest>();

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        foreach (string key in query.Keys)
        {
            if (!string.IsNullOrEmpty(key))
            {
                UrlParameters[key] = query[key];
            }
        }

        await LoadAllocationTestsAsync();

        if (UrlParameters.ContainsKey("HelamanPriorityDate") &&
            DateTime.TryParse(UrlParameters["HelamanPriorityDate"], out var helamanPriorityDate))
        {
            HelamanPriorityDate = helamanPriorityDate;
            StartCountdownForHelaman();
        }

        if (UrlParameters.ContainsKey("HeritagePriorityDate") &&
            DateTime.TryParse(UrlParameters["HeritagePriorityDate"], out var heritagePriorityDate))
        {
            HeritagePriorityDate = heritagePriorityDate;
            StartCountdownForHeritage();
        }
    }

    private async Task LoadAllocationTestsAsync()
    {
        AllocationTests = await Task.Run(() => GenService.GetModel<AllocationTest>().ToList());
    }

    private void StartCountdownForHelaman()
    {
        _timerHelaman = new System.Threading.Timer(UpdateCountdownHelaman, null, 0, 1000);
    }

    private void UpdateCountdownHelaman(object? state)
    {
        if (HelamanPriorityDate.HasValue)
        {
            var now = DateTime.UtcNow;
            var remaining = HelamanPriorityDate.Value - now;

            if (remaining <= TimeSpan.Zero)
            {
                AccessMessage = "You have access";
                _timerHelaman?.Dispose();
            }
            else
            {
                AccessMessage = $"Helaman Halls: You do not have access. Time remaining: {remaining.Days} days, {remaining.Hours} hours, {remaining.Minutes} minutes, {remaining.Seconds} seconds.";
            }

            InvokeAsync(() => StateHasChanged());
        }
    }

    private void StartCountdownForHeritage()
    {
        _timerHeritage = new System.Threading.Timer(UpdateCountdownHeritage, null, 0, 1000);
    }

    private void UpdateCountdownHeritage(object? state)
    {
        if (HeritagePriorityDate.HasValue)
        {
            var now = DateTime.UtcNow;
            var remaining = HeritagePriorityDate.Value - now;

            if (remaining <= TimeSpan.Zero)
            {
                HeritageAccessMessage = "You have access";
                _timerHeritage?.Dispose();
            }
            else
            {
                HeritageAccessMessage = $"Heritage Halls: You do not have access. Time remaining: {remaining.Days} days, {remaining.Hours} hours, {remaining.Minutes} minutes, {remaining.Seconds} seconds.";
            }

            InvokeAsync(() => StateHasChanged());
        }
    }

    private int GetActiveCount(int area)
    {
        return AllocationTests?.Count(a => a.Active == true && a.Area == area) ?? 0;
    }

    private int GetSwappableCount(int area)
    {
        return AllocationTests?.Count(a => a.Active == true && a.Swappable == true && a.Area == area) ?? 0;
    }

    private int GetSeekingReplacementCount(int area)
    {
        return AllocationTests?.Count(a => a.Active == true && a.SeekingReplacement == true && a.Area == area) ?? 0;
    }

    private void NavigateToStepFourSelectBuilding()
    {
        NavigationManager.NavigateTo("/stepFourSelectBuilding");
    }

    public void Dispose()
    {
        _timerHelaman?.Dispose();
        _timerHeritage?.Dispose();
    }
}
