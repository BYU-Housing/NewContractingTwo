@page "/stepThreeSelectArea"
@inject IGenService GenService
@inject NavigationManager NavigationManager

<h3>Step Three Select Area</h3>

<!-- Large Block with Image -->
<div class="row justify-content-center mb-4">
    <div class="col-md-10">
        <div class="card">
            <div class="card-header text-center">
                <h4>@AccessMessage</h4>
            </div>
            <div class="row no-gutters">
                <!-- Image Section -->
                <div class="col-md-4 text-center">
                    <img src="https://reslife-pictures.s3.us-east-1.amazonaws.com/contracting/HL.jpg" class="img-fluid" alt="Helaman Halls Image">
                    <h2 class="card-title mt-2">Helaman Halls</h2>
                    <!-- Small Headers -->
                    <div style="text-align: left; margin-left: 0; padding-left: 0;">
                        <small>Available</small><br />
                        <small>Seeking Replacement</small>
                    </div>
                </div>
                <!-- Text Section -->
                <div class="col-md-8">
                    <div class="card-body">
                        <p>
                            Helaman Halls caters to full-time day continuing students with various room options.
                            The housing area is divided into communities based on age, accommodating recent high
                            school graduates as well as older students. The environment upholds the honor code and
                            gospel-centered community standards. The housing options include shared rooms with sinks,
                            shared suites, and single suites, each furnished with essential amenities. Amenities such
                            as the Cannon Commons, laundry facilities, on-site parking, and recreational spaces add to
                            the convenience and comfort. Rental payments encompass utilities, internet access, and
                            Residence Life activities, fostering a holistic living experience for residents.
                        </p>

                        <!-- List of AllocationTest Ids -->
                        <h5>AllocationTest IDs</h5>
                        @if (AllocationTests == null)
                        {
                            <p>Loading...</p>
                        }
                        else if (AllocationTests.Any())
                        {
                            <ul>
                                @foreach (var allocation in AllocationTests)
                                {
                                    <li>@allocation.Id</li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p>No data found.</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<h3 class="text-center">Hidden Developer Notes</h3>
<!-- Table to Display URL Parameters -->
<div class="row justify-content-center">
    <div class="col-md-8">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Parameter Name</th>
                    <th>Value</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var param in UrlParameters)
                {
                    <tr>
                        <td>@GetFormattedParameterName(param.Key)</td>
                        <td>
                            @if (param.Key == "AgreementPeriod" && int.TryParse(param.Value, out var period))
                            {
                                @GetAgreementPeriodDescription(period)
                            }
                            else if ((param.Key == "SexAtBirth" || param.Key == "Community") && bool.TryParse(param.Value, out var booleanValue))
                            {
                                @GetBooleanDescription(param.Key, booleanValue)
                            }
                            else if (DateFields.Contains(param.Key) && DateTime.TryParse(param.Value, out var dateValue))
                            {
                                @dateValue.ToString("yyyy-MM-dd HH:mm:ss")
                            }
                            else if (param.Key == "SelectedDate" && DateTime.TryParse(param.Value, out var selectedDateValue))
                            {
                                @selectedDateValue.ToString("yyyy-MM-dd HH:mm:ss")
                            }
                            else
                            {
                                @param.Value
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private Dictionary<string, string?> UrlParameters = new Dictionary<string, string?>();
    private string AccessMessage = "You do not have access";
    private DateTime? HelamanPriorityDate;
    private System.Threading.Timer? _timer;
    private List<AllocationTest> AllocationTests { get; set; } = new List<AllocationTest>();

    private HashSet<string> DateFields = new()
    {
        "HelamanPriorityDate",
        "HeritagePriorityDate",
        "WyviewParkPriorityDate",
        "RivieraPriorityDate",
        "AgreementStartDate",
        "AgreementEndDate",
        "SelectedDate"
    };

    protected override async Task OnInitializedAsync()
    {
        // Parse the query string from the URL
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        foreach (string key in query.Keys)
        {
            if (!string.IsNullOrEmpty(key))
            {
                UrlParameters[key] = query[key];
            }
        }

        // Load AllocationTest data
        await LoadAllocationTestsAsync();

        // Check HelamanPriorityDate against the current timestamp
        if (UrlParameters.ContainsKey("HelamanPriorityDate") &&
            DateTime.TryParse(UrlParameters["HelamanPriorityDate"], out var helamanPriorityDate))
        {
            HelamanPriorityDate = helamanPriorityDate;

            if (helamanPriorityDate <= DateTime.UtcNow)
            {
                AccessMessage = "You have access";
            }
            else
            {
                AccessMessage = "You do not have access.";
                StartTimer();
            }
        }
    }

    private async Task LoadAllocationTestsAsync()
    {
        AllocationTests = await Task.Run(() => GenService.GetModel<AllocationTest>().ToList());
    }

    private void StartTimer()
    {
        _timer = new System.Threading.Timer(UpdateCountdown, null, 0, 1000); // 1-second interval
    }

    private void UpdateCountdown(object? state)
    {
        if (HelamanPriorityDate.HasValue)
        {
            var now = DateTime.UtcNow;
            var remaining = HelamanPriorityDate.Value - now;

            if (remaining <= TimeSpan.Zero)
            {
                AccessMessage = "You have access";
                _timer?.Dispose();
                _timer = null;
            }
            else
            {
                AccessMessage = $"You do not have access. Time remaining: {remaining.Days} days, {remaining.Hours} hours, {remaining.Minutes} minutes, {remaining.Seconds} seconds.";
                InvokeAsync(StateHasChanged); // Refresh UI
            }
        }
    }

    public void Dispose()
    {
        _timer?.Dispose(); // Clean up resources
    }

    private string GetAgreementPeriodDescription(int agreementPeriod)
    {
        return agreementPeriod switch
        {
            3 => "Fall Winter 2024 - 2025",
            4 => "Winter 2025",
            5 => "Spring 2025",
            6 => "Summer 2025",
            7 => "Fall Winter 2025",
            _ => "Unknown Agreement Period"
        };
    }

    private string GetBooleanDescription(string key, bool value)
    {
        return key switch
        {
            "SexAtBirth" => value ? "Female" : "Male",
            "Community" => value ? "19+" : "18-",
            _ => value ? "True" : "False"
        };
    }

    private string GetFormattedParameterName(string key)
    {
        return key.Replace("PriorityDate", " Priority Date")
                  .Replace("SexAtBirth", "Sex At Birth")
                  .Replace("AgreementPeriod", "Agreement Period")
                  .Replace("Community", "Community")
                  .Replace("Eligible", "Eligible")
                  .Replace("REQMet", "Requirement Met")
                  .Replace("ESA", "Emotional Support Animal")
                  .Replace("Scholarship", "Scholarship");
    }
}
