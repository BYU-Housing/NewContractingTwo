@page "/stepThreeSelectArea"
@inject IGenService GenService
@inject NavigationManager NavigationManager

<h1 style="text-align: center;">Contracting Portal</h1>
<!-- Progress Bar -->
<div class="progress mb-4">
    <div class="progress-bar"
         role="progressbar"
         style="width: 30%; background-color: #007bff;"
         aria-valuenow="3"
         aria-valuemin="0"
         aria-valuemax="10">
        Step 3 of 10
    </div>
</div>
<h5>Step 3 - Select your desired Area</h5>
<p>
Please select the area that you would like to live in. Each area card shows the number of bedspaces for which you qualify to live. 
Please note that each area has its own access date, depending on the day you may have access to contractin on one area, but not another. 
If you will be eligible for an area at a future date, you will see a countdown timer that shows you how long until you will be able to contract. 
</p>
<!-- Helaman Halls Block -->
<div class="row justify-content-center mb-4">
    <div class="col-md-10">
        <div class="card">
            <div class="card-header text-center">
                <h4>@AccessMessage</h4>
            </div>
            <div class="row no-gutters">
                <div class="col-md-4 text-center">
                    <img src="https://reslife-pictures.s3.us-east-1.amazonaws.com/contracting/HL.jpg" class="img-fluid" alt="Helaman Halls Image">
                    <h2 class="card-title mt-2">Helaman Halls</h2>
                    <div style="text-align: left; margin-left: 0; padding-left: 0;">
                        @if (AllocationTests == null)
                        {
                            <small>Calculating totals...</small>
                        }
                        else
                        {
                            <small>Total: @AllocationTests.Count(a => a.Area == 1 && a.AgreementPeriod == AgreementPeriod)</small>
                            <br />
@*                             <small>Available (@GetActiveCount(1) Active)</small>
                            <br />
                            <small>Swappable (@GetSwappableCount(1) Swappable)</small>
                            <br />
                            <small>Seeking Replacement (@GetSeekingReplacementCount(1))</small>
                            <br />
                            <small>User Specific Options (@GetUserSpecificOptionsCount(1))</small>
                            <br />
                            <small>+ Freeze Activity(@GetUserSpecificOptionsWithNoFreeze(1))</small>
                            <br />
                            <small>+ No Taken By (@GetUserSpecificOptionsWithNoFreezeAndNotTaken(1))</small>
                            <br />
                            <small>+ No On Hold For(@GetUserSpecificOptionsWithNoFreezeNotTakenAndNotOnHold(1))</small>
                            <br />
                            <small>+ No Requested Roommate (@GetUserSpecificOptionsWithNoFreezeNotTakenNotOnHoldAndNoRequestedRoommate(1))</small>
                            <br />
                            <small>+ Null Group ID (@GetUserSpecificOptionsWithNoFreezeNotTakenNotOnHoldNoRequestedRoommateAndNoGroup(1))</small>
                            <br />
                            <small>+ Occupant Type = Single(@GetUserSpecificOptionsWithNoFreezeNotTakenNotOnHoldNoRequestedRoommateNoGroupAndOccupantTypeOne(1))</small>
                            <br />
                            <small>+ Match Sex At Birth (@GetUserSpecificOptionsWithAllConditionsAndMatchingSexAtBirth(1))</small>
                            <br />
                            <small>+ Minor (@GetUserSpecificOptionsWithAllConditionsAndMatchingSexAtBirthAndOptionalMinorCheck(1))</small>
                            <br />
                            <small>+ Community (@AddCommunity(1))</small>
                            <br /> *@
                            <small>Available for you. (@AddCommunityAndREQMet(1))</small>






                        }
                    </div>
                </div>
                <div class="col-md-8">
                    <div class="card-body">
                        <p>
                            Helaman Halls caters to full-time day continuing students with various room options. The housing area is divided into communities based on age, 
                            accommodating recent high school graduates as well as older students. The environment upholds the honor code and gospel-centered community standards. 
                            The housing options include shared rooms with sinks, shared suites, and single suites, each furnished with essential amenities. Amenities such as the 
                            Cannon Commons, laundry facilities, on-site parking, and recreational spaces add to the convenience and comfort. Rental payments encompass utilities, 
                            internet access, and Residence Life activities, fostering a holistic living experience for residents.
                        </p>
                        <div class="text-center mt-3">
                            <button class="btn btn-primary" @onclick="() => NavigateToStepFourSelectBuilding(1)" disabled="@IsHelamanButtonDisabled">
                                Go to Step Four: Select Building
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Heritage Halls Block -->
<div class="row justify-content-center mb-4">
    <div class="col-md-10">
        <div class="card">
            <div class="card-header text-center">
                <h4>@HeritageAccessMessage</h4>
            </div>
            <div class="row no-gutters">
                <div class="col-md-4 text-center">
                    <img src="https://reslife-pictures.s3.us-east-1.amazonaws.com/contracting/HR.jpg" class="img-fluid" alt="Heritage Halls Image">
                    <h2 class="card-title mt-2">Heritage Halls</h2>
                    <div style="text-align: left; margin-left: 0; padding-left: 0;">
                        @if (AllocationTests == null)
                        {
                            <small>Calculating totals...</small>
                        }
                        else
                        {
                            <small>Total: @AllocationTests.Count(a => a.Area == 2 && a.AgreementPeriod == AgreementPeriod)</small>
                            <br />
@*                             <small>Available (@GetActiveCount(2) Active)</small>
                            <br />
                            <small>Swappable (@GetSwappableCount(2) Swappable)</small>
                            <br />
                            <small>Seeking Replacement (@GetSeekingReplacementCount(2))</small>
                            <br />
                            <small>User Specific Options (@GetUserSpecificOptionsCount(2))</small>
                            <br />
                            <small>+ Freeze Activity(@GetUserSpecificOptionsWithNoFreeze(2))</small>
                            <br />
                            <small>+ No Taken By (@GetUserSpecificOptionsWithNoFreezeAndNotTaken(2))</small>
                            <br />
                            <small>+ No On Hold For(@GetUserSpecificOptionsWithNoFreezeNotTakenAndNotOnHold(2))</small>
                            <br />
                            <small>+ No Requested Roommate (@GetUserSpecificOptionsWithNoFreezeNotTakenNotOnHoldAndNoRequestedRoommate(2))</small>
                            <br />
                            <small>+ Null Group ID (@GetUserSpecificOptionsWithNoFreezeNotTakenNotOnHoldNoRequestedRoommateAndNoGroup(2))</small>
                            <br />
                            <small>+ Occupant Type = Single(@GetUserSpecificOptionsWithNoFreezeNotTakenNotOnHoldNoRequestedRoommateNoGroupAndOccupantTypeOne(2))</small>
                            <br />
                            <small>+ Match Sex At Birth (@GetUserSpecificOptionsWithAllConditionsAndMatchingSexAtBirth(2))</small>
                            <br />
                            <small>+ Minor (@GetUserSpecificOptionsWithAllConditionsAndMatchingSexAtBirthAndOptionalMinorCheck(2))</small>
                            <br />
                            <small>+ Community (@AddCommunity(2))</small>
                            <br /> *@
                            <small>Available for you. (@AddCommunityAndREQMet(2))</small>

                        }
                    </div>
                </div>
                <div class="col-md-8">
                    <div class="card-body">
                        <p>
                            Heritage Halls, tailored for full-time day continuing students, presents an array of accommodations. The community adheres to credit hour 
                            requirements, with special provisions for Spring and Summer Terms. Tenants dwell in age-specific communities, including the 18 and Under 
                            Community and the 19 and Over Community. Embracing the honor code and gospel-centered ideals, Heritage Halls fosters a supportive environment.
                            Housing options comprise shared rooms with amenities like three shared bedrooms, private desks, and kitchen appliances. Single rooms with 
                            similar amenities are also available. Various services encompass meal plans, kitchen facilities, laundry, parking, and recreational spaces, 
                            offering a comprehensive student living experience.
                        </p>
                        <div class="text-center mt-3">
                            <button class="btn btn-primary" @onclick="() => NavigateToStepFourSelectBuilding(2)" disabled="@IsHeritageButtonDisabled">
                                Go to Step Four: Select Building
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Riviera Block -->
<div class="row justify-content-center mb-4">
    <div class="col-md-10">
        <div class="card">
            <div class="card-header text-center">
                <h4>@RivieraAccessMessage</h4>
            </div>
            <div class="row no-gutters">
                <div class="col-md-4 text-center">
                    <img src="https://reslife-pictures.s3.us-east-1.amazonaws.com/contracting/RI.jpg" class="img-fluid" alt="Riviera Image">
                    <h2 class="card-title mt-2">The Riviera</h2>
                    <div style="text-align: left; margin-left: 0; padding-left: 0;">
                        @if (AllocationTests == null)
                        {
                            <small>Calculating totals...</small>
                        }
                        else
                        {
                            <small>Total: @AllocationTests.Count(a => a.Area == 3 && a.AgreementPeriod == AgreementPeriod)</small>
                            <br />
@*                             <small>Available (@GetActiveCount(3) Active)</small>
                            <br />
                            <small>Swappable (@GetSwappableCount(3) Swappable)</small>
                            <br />
                            <small>Seeking Replacement (@GetSeekingReplacementCount(3))</small>
                            <br />
                            <small>User Specific Options (@GetUserSpecificOptionsCount(3))</small>
                            <br />
                            <small>+ Freeze Activity(@GetUserSpecificOptionsWithNoFreeze(3))</small>
                            <br />
                            <small>+ No Taken By (@GetUserSpecificOptionsWithNoFreezeAndNotTaken(3))</small>
                            <br />
                            <small>+ No On Hold For(@GetUserSpecificOptionsWithNoFreezeNotTakenAndNotOnHold(3))</small>
                            <br />
                            <small>+ No Requested Roommate (@GetUserSpecificOptionsWithNoFreezeNotTakenNotOnHoldAndNoRequestedRoommate(3))</small>
                            <br />
                            <small>+ Null Group ID (@GetUserSpecificOptionsWithNoFreezeNotTakenNotOnHoldNoRequestedRoommateAndNoGroup(3))</small>
                            <br />
                            <small>+ Occupant Type = Single(@GetUserSpecificOptionsWithNoFreezeNotTakenNotOnHoldNoRequestedRoommateNoGroupAndOccupantTypeOne(3))</small>
                            <br />
                            <small>+ Match Sex At Birth (@GetUserSpecificOptionsWithAllConditionsAndMatchingSexAtBirth(3))</small>
                            <br />
                            <small>+ Minor (@GetUserSpecificOptionsWithAllConditionsAndMatchingSexAtBirthAndOptionalMinorCheck(3))</small>
                            <br />
                            <small>+ Community (@AddCommunity(3))</small>
                            <br /> *@
                            <small>Available for you.(@AddCommunityAndREQMet(3))</small>

                        }
                    </div>
                </div>
                <div class="col-md-8">
                    <div class="card-body">
                        <p>
                            The Riviera is a housing option at Brigham Young University for full-time day continuing students, defined as those taking at least 9 credits as undergraduates 
                            or 2 credits as graduate students. The credit requirements shift to 4 credits for undergraduates and 2 credits for graduates during Spring and Summer Terms. 
                            This housing welcomes all students. Upholding the honor code and gospel-centered community standards is expected of Riviera tenants. The apartments feature two 
                            or three shared bedrooms, each furnished with two beds, a desk, chair, and closet. Apartment amenities include kitchen appliances, dining furniture, and shared 
                            laundry facilities. Additional facilities such as a fitness center, pool, hot tub, volleyball court, and clubhouse are provided, and rental payments cover gas, 
                            water, sewer/refuse removal, and high-speed internet, with tenants responsible for electricity costs.
                        </p>
                        <div class="text-center mt-3">
                            <button class="btn btn-primary" @onclick="() => NavigateToStepFourSelectBuilding(3)" disabled="@IsRivieraButtonDisabled">
                                Go to Step Four: Select Building
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Wyview Park Block -->
<div class="row justify-content-center mb-4">
    <div class="col-md-10">
        <div class="card">
            <div class="card-header text-center">
                <h4>@WyviewAccessMessage</h4>
            </div>
            <div class="row no-gutters">
                <div class="col-md-4 text-center">
                    <img src="https://reslife-pictures.s3.us-east-1.amazonaws.com/contracting/WP.jpg" class="img-fluid" alt="Wyview Park Image">
                    <h2 class="card-title mt-2">Wyview Park</h2>
                    <div style="text-align: left; margin-left: 0; padding-left: 0;">
                        @if (AllocationTests == null)
                        {
                            <small>Calculating totals...</small>
                        }
                        else
                        {
                            <small>Total: @AllocationTests.Count(a => a.Area == 4 && a.AgreementPeriod == AgreementPeriod)</small>
                            <br />
@*                             <small>Available (@GetActiveCount(4) Active)</small>
                            <br />
                            <small>Swappable (@GetSwappableCount(4) Swappable)</small>
                            <br />
                            <small>Seeking Replacement (@GetSeekingReplacementCount(4))</small>
                            <br />
                            <small>User Specific Options (@GetUserSpecificOptionsCount(4))</small>
                            <br />
                            <small>+ No Freeze Activity(@GetUserSpecificOptionsWithNoFreeze(4))</small>
                            <br />
                            <small>+ No Taken By (@GetUserSpecificOptionsWithNoFreezeAndNotTaken(4))</small>
                            <br />
                            <small>+ No On Hold For(@GetUserSpecificOptionsWithNoFreezeNotTakenAndNotOnHold(4))</small>
                            <br />
                            <small>+ No Requested Roommate (@GetUserSpecificOptionsWithNoFreezeNotTakenNotOnHoldAndNoRequestedRoommate(4))</small>
                            <br />
                            <small>+ Null Group ID (@GetUserSpecificOptionsWithNoFreezeNotTakenNotOnHoldNoRequestedRoommateAndNoGroup(4))</small>
                            <br />
                            <small>+ Occupant Type = Single(@GetUserSpecificOptionsWithNoFreezeNotTakenNotOnHoldNoRequestedRoommateNoGroupAndOccupantTypeOne(4))</small>
                            <br />
                            <small>+ Match Sex At Birth (@GetUserSpecificOptionsWithAllConditionsAndMatchingSexAtBirth(4))</small>
                            <br />
                            <small>+ Minor (@GetUserSpecificOptionsWithAllConditionsAndMatchingSexAtBirthAndOptionalMinorCheck(4))</small>
                            <br />
                            <small>+ Community (@AddCommunity(4))</small>
                            <br /> *@
                            <small>Available for you. (@AddCommunityAndREQMet(4))</small>

                        }
                    </div>
                </div>
                <div class="col-md-8">
                    <div class="card-body">
                        <p>
                            Wyview Park is designated for full-time day continuing students at Brigham Young University, encompassing those 
                            taking a minimum of 9 credit hours as undergraduate students or 2 credits as graduate students. The credit requirements 
                            during Spring and Summer Terms are adjusted to 4 credits for undergraduates and 2 credits for graduates. Tenants residing 
                            at Wyview Park are part of the 19 and Over Community. This community is intended for prior tenants, which encompasses students 
                            who have previously lived on-campus for a Fall and/or Winter semester, as well as students who reached the age of 19 before 
                            January 1, 2022. Upholding the university's honor code and fostering a gospel-centered environment are expected from Wyview Park 
                            tenants. The apartments feature two or three bedrooms and one bathroom, furnished with essential items such as beds, desks, chairs, 
                            dressers, and dining furniture. Amenities include kitchen appliances, laundry facilities, sport courts, and ample parking options. 
                            Rental payments cover utilities like gas, water, sewer/refuse removal, and high-speed internet, while tenants are responsible for 
                            electricity. Students are encouraged to explore diverse meal plans, and the apartment complex offers shared kitchens for three to 
                            four tenants. The housing costs vary based on the agreement period and room type.
                        </p>
                        <div class="text-center mt-3">
                            <button class="btn btn-primary" @onclick="() => NavigateToStepFourSelectBuilding(4)" disabled="@IsWyviewButtonDisabled">
                                Go to Step Four: Select Building
                            </button>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Dictionary<string, string?> UrlParameters = new Dictionary<string, string?>();
    private List<AllocationTest> AllocationTests { get; set; } = new List<AllocationTest>();
    private int AgreementPeriod = 0;

    private string AccessMessage = "You do not have access";
    private string HeritageAccessMessage = "You do not have access";
    private string RivieraAccessMessage = "You do not have access";
    private string WyviewAccessMessage = "You do not have access";

    private DateTime? HelamanPriorityDate;
    private DateTime? HeritagePriorityDate;
    private DateTime? RivieraPriorityDate;
    private DateTime? WyviewParkPriorityDate;

    private bool IsHelamanButtonDisabled => !IsHelamanAccessGranted;
    private bool IsHeritageButtonDisabled => !IsHeritageAccessGranted;
    private bool IsRivieraButtonDisabled => !IsRivieraAccessGranted;
    private bool IsWyviewButtonDisabled => !IsWyviewAccessGranted;

    private bool IsHelamanAccessGranted = false;
    private bool IsHeritageAccessGranted = false;
    private bool IsRivieraAccessGranted = false;
    private bool IsWyviewAccessGranted = false;

    private System.Threading.Timer? _timerHelaman;
    private System.Threading.Timer? _timerHeritage;
    private System.Threading.Timer? _timerRiviera;
    private System.Threading.Timer? _timerWyview;

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        foreach (string key in query.Keys)
        {
            if (!string.IsNullOrEmpty(key))
            {
                UrlParameters[key] = query[key];
            }
        }

        if (UrlParameters.ContainsKey("AgreementPeriod") &&
            int.TryParse(UrlParameters["AgreementPeriod"], out var agreementPeriod))
        {
            AgreementPeriod = agreementPeriod;
        }

        await LoadAllocationTestsAsync();

        if (UrlParameters.ContainsKey("HelamanPriorityDate") &&
            DateTime.TryParse(UrlParameters["HelamanPriorityDate"], out var helamanPriorityDate))
        {
            HelamanPriorityDate = helamanPriorityDate;
            StartCountdownForHelaman();
        }

        if (UrlParameters.ContainsKey("HeritagePriorityDate") &&
            DateTime.TryParse(UrlParameters["HeritagePriorityDate"], out var heritagePriorityDate))
        {
            HeritagePriorityDate = heritagePriorityDate;
            StartCountdownForHeritage();
        }

        if (UrlParameters.ContainsKey("RivieraPriorityDate") &&
            DateTime.TryParse(UrlParameters["RivieraPriorityDate"], out var rivieraPriorityDate))
        {
            RivieraPriorityDate = rivieraPriorityDate;
            StartCountdownForRiviera();
        }

        if (UrlParameters.ContainsKey("WyviewParkPriorityDate") &&
            DateTime.TryParse(UrlParameters["WyviewParkPriorityDate"], out var wyviewPriorityDate))
        {
            WyviewParkPriorityDate = wyviewPriorityDate;
            StartCountdownForWyview();
        }
    }

    private async Task LoadAllocationTestsAsync()
    {
        AllocationTests = await Task.Run(() => GenService.GetModel<AllocationTest>().ToList());
    }

    private void StartCountdownForHelaman()
    {
        _timerHelaman = new System.Threading.Timer(UpdateCountdownHelaman, null, 0, 1000);
    }

    private void UpdateCountdownHelaman(object? state)
    {
        if (HelamanPriorityDate.HasValue)
        {
            var now = DateTime.UtcNow;
            var remaining = HelamanPriorityDate.Value - now;

            if (remaining <= TimeSpan.Zero)
            {
                AccessMessage = "You have access";
                IsHelamanAccessGranted = true;
                _timerHelaman?.Dispose();
            }
            else
            {
                AccessMessage = $"Helaman Halls: You do not have access. Time remaining: {remaining.Days} days, {remaining.Hours} hours, {remaining.Minutes} minutes, {remaining.Seconds} seconds.";
            }

            InvokeAsync(() => StateHasChanged());
        }
    }

    private void StartCountdownForHeritage()
    {
        _timerHeritage = new System.Threading.Timer(UpdateCountdownHeritage, null, 0, 1000);
    }

    private void UpdateCountdownHeritage(object? state)
    {
        if (HeritagePriorityDate.HasValue)
        {
            var now = DateTime.UtcNow;
            var remaining = HeritagePriorityDate.Value - now;

            if (remaining <= TimeSpan.Zero)
            {
                HeritageAccessMessage = "You have access";
                IsHeritageAccessGranted = true;
                _timerHeritage?.Dispose();
            }
            else
            {
                HeritageAccessMessage = $"Heritage Halls: You do not have access. Time remaining: {remaining.Days} days, {remaining.Hours} hours, {remaining.Minutes} minutes, {remaining.Seconds} seconds.";
            }

            InvokeAsync(() => StateHasChanged());
        }
    }

    private void StartCountdownForRiviera()
    {
        _timerRiviera = new System.Threading.Timer(UpdateCountdownRiviera, null, 0, 1000);
    }

    private void UpdateCountdownRiviera(object? state)
    {
        if (RivieraPriorityDate.HasValue)
        {
            var now = DateTime.UtcNow;
            var remaining = RivieraPriorityDate.Value - now;

            if (remaining <= TimeSpan.Zero)
            {
                RivieraAccessMessage = "You have access";
                IsRivieraAccessGranted = true;
                _timerRiviera?.Dispose();
            }
            else
            {
                RivieraAccessMessage = $"The Riviera: You do not have access. Time remaining: {remaining.Days} days, {remaining.Hours} hours, {remaining.Minutes} minutes, {remaining.Seconds} seconds.";
            }

            InvokeAsync(() => StateHasChanged());
        }
    }

    private void StartCountdownForWyview()
    {
        _timerWyview = new System.Threading.Timer(UpdateCountdownWyview, null, 0, 1000);
    }

    private void UpdateCountdownWyview(object? state)
    {
        if (WyviewParkPriorityDate.HasValue)
        {
            var now = DateTime.UtcNow;
            var remaining = WyviewParkPriorityDate.Value - now;

            if (remaining <= TimeSpan.Zero)
            {
                WyviewAccessMessage = "You have access";
                IsWyviewAccessGranted = true;
                _timerWyview?.Dispose();
            }
            else
            {
                WyviewAccessMessage = $"Wyview Park: You do not have access. Time remaining: {remaining.Days} days, {remaining.Hours} hours, {remaining.Minutes} minutes, {remaining.Seconds} seconds.";
            }

            InvokeAsync(() => StateHasChanged());
        }
    }

    private int GetActiveCount(int area)
    {
        return AllocationTests?.Count(a => a.Active == true && a.Area == area && a.AgreementPeriod == AgreementPeriod) ?? 0;
    }

    private int GetSwappableCount(int area)
    {
        return AllocationTests?.Count(a => a.Active == true && a.Swappable == true && a.Area == area && a.AgreementPeriod == AgreementPeriod) ?? 0;
    }

    private int GetSeekingReplacementCount(int area)
    {
        return AllocationTests?.Count(a => a.Active == true && a.SeekingReplacement == true && a.Area == area && a.AgreementPeriod == AgreementPeriod) ?? 0;
    }

    private void NavigateToStepFourSelectBuilding(int area)
    {
        // Retrieve the current URL and parse query parameters
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        // Add or update the "Area" parameter
        query["Area"] = area.ToString();

        // Construct the new URL with updated parameters
        var newQueryString = query.ToString();
        NavigationManager.NavigateTo($"/stepFourSelectBuilding?{newQueryString}");
    }

    public void Dispose()
    {
        _timerHelaman?.Dispose();
        _timerHeritage?.Dispose();
        _timerRiviera?.Dispose();
        _timerWyview?.Dispose();
    }

    private int GetUserSpecificOptionsCount(int area)
    {
        // Initially, use the same logic as GetActiveCount
        return AllocationTests?.Count(a => a.Active == true && a.Area == area && a.AgreementPeriod == AgreementPeriod) ?? 0;
    }
    private int GetUserSpecificOptionsWithNoFreeze(int area)
    {
        return AllocationTests?.Count(a =>
            a.Active == true &&
            a.Area == area &&
            a.AgreementPeriod == AgreementPeriod &&
            a.FreezeActivity == false
        ) ?? 0;
    }

    private int GetUserSpecificOptionsWithNoFreezeAndNotTaken(int area)
    {
        return AllocationTests?.Count(a =>
            a.Active == true &&
            a.Area == area &&
            a.AgreementPeriod == AgreementPeriod &&
            a.FreezeActivity == false &&
            string.IsNullOrEmpty(a.TakenBy)
        ) ?? 0;
    }

    private int GetUserSpecificOptionsWithNoFreezeNotTakenAndNotOnHold(int area)
    {
        return AllocationTests?.Count(a =>
            a.Active == true &&
            a.Area == area &&
            a.AgreementPeriod == AgreementPeriod &&
            a.FreezeActivity == false &&
            string.IsNullOrEmpty(a.TakenBy) &&
            string.IsNullOrEmpty(a.OnHoldFor)
        ) ?? 0;
    }

    private int GetUserSpecificOptionsWithNoFreezeNotTakenNotOnHoldAndNoRequestedRoommate(int area)
    {
        return AllocationTests?.Count(a =>
            a.Active == true &&
            a.Area == area &&
            a.AgreementPeriod == AgreementPeriod &&
            a.FreezeActivity == false &&
            string.IsNullOrEmpty(a.TakenBy) &&
            string.IsNullOrEmpty(a.OnHoldFor) &&
            string.IsNullOrEmpty(a.RequestedRoommate)
        ) ?? 0;
    }
    private int GetUserSpecificOptionsWithNoFreezeNotTakenNotOnHoldNoRequestedRoommateAndNoGroup(int area)
    {
        return AllocationTests?.Count(a =>
            a.Active == true &&
            a.Area == area &&
            a.AgreementPeriod == AgreementPeriod &&
            a.FreezeActivity == false &&
            string.IsNullOrEmpty(a.TakenBy) &&
            string.IsNullOrEmpty(a.OnHoldFor) &&
            string.IsNullOrEmpty(a.RequestedRoommate) &&
            a.GroupId == null
        ) ?? 0;
    }
    private int GetUserSpecificOptionsWithNoFreezeNotTakenNotOnHoldNoRequestedRoommateNoGroupAndOccupantTypeOne(int area)
    {
        return AllocationTests?.Count(a =>
            a.Active == true &&
            a.Area == area &&
            a.AgreementPeriod == AgreementPeriod &&
            a.FreezeActivity == false &&
            string.IsNullOrEmpty(a.TakenBy) &&
            string.IsNullOrEmpty(a.OnHoldFor) &&
            string.IsNullOrEmpty(a.RequestedRoommate) &&
            a.GroupId == null &&
            a.OccupantType == 1
        ) ?? 0;
    }

    private int GetUserSpecificOptionsWithAllConditionsAndMatchingSexAtBirth(int area)
    {
        bool? sexAtBirth = null;

        // Check if the SexAtBirth parameter exists and parse it as a boolean
        if (UrlParameters.ContainsKey("SexAtBirth") && bool.TryParse(UrlParameters["SexAtBirth"], out var sexAtBirthValue))
        {
            sexAtBirth = sexAtBirthValue;
        }

        return AllocationTests?.Count(a =>
            a.Active == true &&
            a.Area == area &&
            a.AgreementPeriod == AgreementPeriod &&
            a.FreezeActivity == false &&
            string.IsNullOrEmpty(a.TakenBy) &&
            string.IsNullOrEmpty(a.OnHoldFor) &&
            string.IsNullOrEmpty(a.RequestedRoommate) &&
            a.GroupId == null &&
            a.OccupantType == 1 &&
            (!sexAtBirth.HasValue || a.Sex == sexAtBirth.Value)
        ) ?? 0;
    }

    private int GetUserSpecificOptionsWithAllConditionsAndMatchingSexAtBirthAndOptionalMinorCheck(int area)
    {
        bool? sexAtBirth = null;
        bool? minor = null;
        Func<AllocationTest, bool> additionalCondition = _ => true; // Default condition: always true

        // Check if the SexAtBirth parameter exists and parse it as a boolean
        if (UrlParameters.ContainsKey("SexAtBirth") && bool.TryParse(UrlParameters["SexAtBirth"], out var sexAtBirthValue))
        {
            sexAtBirth = sexAtBirthValue;
        }

        // Check if the Minor parameter exists and parse it as a boolean
        if (UrlParameters.ContainsKey("Minor") && bool.TryParse(UrlParameters["Minor"], out var minorValue))
        {
            minor = minorValue;

            // Add a condition for Minor only if Minor is true in the URL
            if (minor == true)
            {
                additionalCondition = a => a.Minor == true;
            }
        }

        return AllocationTests?.Count(a =>
            a.Active == true &&
            a.Area == area &&
            a.AgreementPeriod == AgreementPeriod &&
            a.FreezeActivity == false &&
            string.IsNullOrEmpty(a.TakenBy) &&
            string.IsNullOrEmpty(a.OnHoldFor) &&
            string.IsNullOrEmpty(a.RequestedRoommate) &&
            a.GroupId == null &&
            a.OccupantType == 1 &&
            (!sexAtBirth.HasValue || a.Sex == sexAtBirth.Value) &&
            additionalCondition(a) // Apply the Minor condition dynamically
        ) ?? 0;
    }

    private int AddCommunity(int area)
    {
        bool? sexAtBirth = null;
        bool? minor = null;
        bool? community = null; // Community parameter
        Func<AllocationTest, bool> additionalCondition = _ => true; // Default condition: always true

        // Parse SexAtBirth parameter
        if (UrlParameters.ContainsKey("SexAtBirth") && bool.TryParse(UrlParameters["SexAtBirth"], out var sexAtBirthValue))
        {
            sexAtBirth = sexAtBirthValue;
        }

        // Parse Minor parameter
        if (UrlParameters.ContainsKey("Minor") && bool.TryParse(UrlParameters["Minor"], out var minorValue))
        {
            minor = minorValue;

            // Add a condition for Minor if Minor is true in the URL
            if (minor == true)
            {
                additionalCondition = a => a.Minor == true;
            }
        }

        // Parse Community parameter
        if (UrlParameters.ContainsKey("Community") && bool.TryParse(UrlParameters["Community"], out var communityValue))
        {
            community = communityValue;
        }

        // Filter allocation tests with all conditions
        return AllocationTests?.Count(a =>
            a.Active == true &&
            a.Area == area &&
            a.AgreementPeriod == AgreementPeriod &&
            a.FreezeActivity == false &&
            string.IsNullOrEmpty(a.TakenBy) &&
            string.IsNullOrEmpty(a.OnHoldFor) &&
            string.IsNullOrEmpty(a.RequestedRoommate) &&
            a.GroupId == null &&
            a.OccupantType == 1 &&
            (!sexAtBirth.HasValue || a.Sex == sexAtBirth.Value) &&
            additionalCondition(a) && // Apply Minor condition dynamically
            (community == true ? a.NineteenPlus == true : a.EighteenMinus == true) // Add Community condition
        ) ?? 0;
    }

    private int AddCommunityAndREQMet(int area)
    {
        bool? sexAtBirth = null;
        bool? minor = null;
        bool? community = null; // Community parameter
        bool? reqMet = null;    // REQMet parameter
        Func<AllocationTest, bool> additionalCondition = _ => true; // Default condition: always true

        // Parse SexAtBirth parameter
        if (UrlParameters.ContainsKey("SexAtBirth") && bool.TryParse(UrlParameters["SexAtBirth"], out var sexAtBirthValue))
        {
            sexAtBirth = sexAtBirthValue;
        }

        // Parse Minor parameter
        if (UrlParameters.ContainsKey("Minor") && bool.TryParse(UrlParameters["Minor"], out var minorValue))
        {
            minor = minorValue;

            // Add a condition for Minor if Minor is true in the URL
            if (minor == true)
            {
                additionalCondition = a => a.Minor == true;
            }
        }

        // Parse Community parameter
        if (UrlParameters.ContainsKey("Community") && bool.TryParse(UrlParameters["Community"], out var communityValue))
        {
            community = communityValue;
        }

        // Parse REQMet parameter
        if (UrlParameters.ContainsKey("REQMet") && bool.TryParse(UrlParameters["REQMet"], out var reqMetValue))
        {
            reqMet = reqMetValue;
        }

        // Filter allocation tests with all conditions
        return AllocationTests?.Count(a =>
            a.Active == true &&
            a.Area == area &&
            a.AgreementPeriod == AgreementPeriod &&
            a.FreezeActivity == false &&
            string.IsNullOrEmpty(a.TakenBy) &&
            string.IsNullOrEmpty(a.OnHoldFor) &&
            string.IsNullOrEmpty(a.RequestedRoommate) &&
            a.GroupId == null &&
            a.OccupantType == 1 &&
            (!sexAtBirth.HasValue || a.Sex == sexAtBirth.Value) &&
            additionalCondition(a) && // Apply Minor condition dynamically
            (community == true ? a.NineteenPlus == true : a.EighteenMinus == true) && // Community condition
            (reqMet == true ? a.REQMet == true : a.REQNotMet == true) // REQMet condition
        ) ?? 0;
    }








}
