@page "/stepSixSelectBedspace"
@inject NavigationManager NavigationManager
@inject IGenService GenService

<h3>Step Six: Select Bedspace</h3>

<h4>Filtered Allocation Test Bedspaces:</h4>
@if (FilteredAllocationTests.Any())
{
    <div>
        @foreach (var allocation in FilteredAllocationTests)
        {
            <button class="btn btn-primary m-2" @onclick="() => OnAllocationSelected(allocation.Id)">
                Bedspace: @allocation.Bedspace
            </button>
        }
    </div>
}
else
{
    <p>No matching Allocation Test rows found.</p>
}

<!-- URL Parameters Section -->
<div style="position: fixed; bottom: 0; left: 0; right: 0; background-color: #f8f9fa; color: gray; text-align: center; padding: 10px; font-size: small; border-top: 1px solid #ddd;">
    <p>@AllUrlParameters</p>
</div>

@code {
    private string AllUrlParameters = string.Empty;
    private List<AllocationTest> FilteredAllocationTests = new();

    protected override void OnInitialized()
    {
        // Parse URL parameters
        var uri = new Uri(NavigationManager.Uri);
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        // Combine URL parameters into a string
        AllUrlParameters = string.Join("&", queryParams.Select(kvp => $"{kvp.Key}={kvp.Value}"));

        // Extract relevant URL parameters
        var area = queryParams.TryGetValue("Area", out var areaValue) && int.TryParse(areaValue, out var a) ? a : (int?)null;
        var buildingId = queryParams.TryGetValue("BuildingId", out var buildingIdValue) && int.TryParse(buildingIdValue, out var bId) ? bId : (int?)null;
        var floor = queryParams.TryGetValue("Floor", out var floorValue) && int.TryParse(floorValue, out var f) ? f : (int?)null;
        var agreementPeriod = queryParams.TryGetValue("AgreementPeriod", out var agreementPeriodValue) && int.TryParse(agreementPeriodValue, out var ap) ? ap : (int?)null;

        // Fetch and filter AllocationTest rows
        FilteredAllocationTests = GenService.GetModel<AllocationTest>()
            .Where(allocation =>
                allocation.Active == true && // Only rows where Active = true
                (!area.HasValue || allocation.Area == area.Value) &&
                (!buildingId.HasValue || allocation.Building == buildingId.Value) &&
                (!floor.HasValue || allocation.Floor == floor.Value) &&
                (!agreementPeriod.HasValue || allocation.AgreementPeriod == agreementPeriod.Value))
            .ToList();
    }

    private void OnAllocationSelected(int id)
    {
        // Pass the Id as a URL parameter to the next page
        NavigationManager.NavigateTo($"/nextPage?SelectedId={id}");
    }
}
