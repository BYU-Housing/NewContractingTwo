@page "/stepSixSelectBedspace"
@inject NavigationManager NavigationManager
@inject IGenService GenService

<h3>Step Six: Select Bedspace</h3>

<!-- Conditional Image Display -->
@if (Floor == 1100 && Area == 1 && BuildingId == 1)
{
    <div class="text-center">
        <img src="https://reslife-pictures.s3.us-east-1.amazonaws.com/floorplans/HL0B11.gif" alt="Floor Plan" class="img-fluid" />
    </div>
}
else if (Floor == 1200 && Area == 1 && BuildingId == 1)
{
    <div class="text-center">
        <img src="Images/HL0B12.gif" alt="Floor Plan" class="img-fluid" />
    </div>
}
else
{
    <div class="text-center">
        <p>Image not available</p>
    </div>
}
<h4>Color Key</h4>
<div class="color-key">
    <div class="color-item">
        <span class="color-box bg-danger"></span> Red = Employee
    </div>
    <div class="color-item">
        <span class="color-box bg-secondary"></span> Gray = Not Available
    </div>
    <div class="color-item">
        <span class="color-box bg-primary"></span> Blue = Available
    </div>
    <div class="color-item">
        <span class="color-box bg-warning text-dark" style="background-color: orange;"></span> Orange = On Hold
    </div>
    <div class="color-item">
        <span class="color-box bg-purple"></span> Purple = Taken
    </div>
    <div class="color-item">
        <span class="color-box bg-success"></span> Green = Selected
    </div>
</div>
<h4>Filtered Allocation Test Bedspaces:</h4>
@if (FilteredAllocationTests.Any())
{
    <div class="button-grid">
@*         @foreach (var allocation in FilteredAllocationTests)
        {
            <button class="btn @(SelectedId == allocation.Id ? "btn-success" : "btn-primary")"
                    @onclick="() => OnAllocationSelected(allocation)">
                @GetFormattedBedspace(allocation.Bedspace)
            </button>
        } *@
        @foreach (var allocation in FilteredAllocationTests.OrderBy(a => a.Bedspace))
        {
            <button class="btn @(SelectedId == allocation.Id ? "btn-success" :
                        (allocation.OccupantType == 7 ? "btn-danger" :
                        (allocation.OccupantType == 5 ? "btn-secondary" :
                        (allocation.OccupantType == 1
                            ? (!string.IsNullOrEmpty(allocation.TakenBy) ? "btn-purple" :
                                (!string.IsNullOrEmpty(allocation.RequestedRoommate) ? "btn-warning text-dark" :
                                (!string.IsNullOrEmpty(allocation.OnHoldFor) ? "btn-warning" : "btn-primary")))
                            : "btn-danger"))))"
                    @onclick="() => OnAllocationSelected(allocation)">
                @GetFormattedBedspace(allocation.Bedspace)
            </button>
        }






    </div>
}
else
{
    <p>No matching Allocation Test rows found.</p>
}

@if (SelectedAllocation != null)
{
    <div class="mt-4">
        <h4>You have selected bedspace @SelectedAllocation.Bedspace</h4>
        <label for="swapPreference">Please select your swap preference:</label>
        <select id="swapPreference" class="form-control" @bind="SelectedSwapPreference">
            <option value="">-- Select --</option>
            <option value="1">I am not willing to swap</option>
            <option value="2">I am willing to swap on my floor</option>
            <option value="3">I am willing to swap in my area</option>
            <option value="4">I am willing to swap anywhere</option>
        </select>

        @if (!string.IsNullOrEmpty(SelectedSwapPreference))
        {
            <button class="btn btn-primary mt-3" @onclick="NavigateToMealPlan">Select Meal Plan</button>
        }
    </div>
}
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<!-- URL Parameters Section -->
<div style="position: fixed; bottom: 0; left: 0; right: 0; background-color: #f8f9fa; color: gray; text-align: center; padding: 10px; font-size: small; border-top: 1px solid #ddd;">
    <p>@AllUrlParameters</p>
</div>
<style>
    .color-key {
        display: flex;
        flex-direction: column;
        margin-bottom: 20px;
    }

    .color-item {
        display: flex;
        align-items: center;
        margin-bottom: 5px;
    }

    .color-box {
        width: 20px;
        height: 20px;
        margin-right: 10px;
        border: 1px solid #ddd;
    }

    .bg-danger {
        background-color: #dc3545; /* Red */
    }

    .bg-secondary {
        background-color: #6c757d; /* Gray */
    }

    .bg-primary {
        background-color: #007bff; /* Blue */
    }

    .bg-warning {
        background-color: #ffc107; /* Yellow/Orange */
    }

    .bg-success {
        background-color: #28a745; /* Green */
    }

    .btn-purple {
        background-color: #6f42c1; /* Bootstrap's purple */
        color: #fff; /* White text for contrast */
        border-color: #6f42c1; /* Match border to background */
    }

        .btn-purple:hover {
            background-color: #5a379d; /* Darker purple for hover effect */
            border-color: #5a379d;
        }

    .bg-purple {
        background-color: #6f42c1; /* Purple */
    }
</style>
@code {
    private string AllUrlParameters = string.Empty;
    private List<AllocationTest> FilteredAllocationTests = new();
    private int? Floor { get; set; }
    private int? Area { get; set; }
    private int? BuildingId { get; set; }
    private int? AgreementPeriod { get; set; } // Add this line
    private int? SelectedId { get; set; } // Track the selected button ID
    private AllocationTest? SelectedAllocation { get; set; } // Nullable to avoid initialization warnings
    private string? SelectedSwapPreference { get; set; } // Nullable to avoid initialization warnings

    protected override void OnInitialized()
    {
        // Parse URL parameters
        var uri = new Uri(NavigationManager.Uri);
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        // Combine URL parameters into a string
        AllUrlParameters = string.Join("&", queryParams.Select(kvp => $"{kvp.Key}={kvp.Value}"));

        // Extract Floor parameter
        Floor = queryParams.TryGetValue("Floor", out var floorValue) && int.TryParse(floorValue, out var f) ? f : (int?)null;

        // Extract Area parameter
        Area = queryParams.TryGetValue("Area", out var areaValue) && int.TryParse(areaValue, out var a) ? a : (int?)null;

        // Extract BuildingId parameter
        BuildingId = queryParams.TryGetValue("BuildingId", out var buildingIdValue) && int.TryParse(buildingIdValue, out var bId) ? bId : (int?)null;
       
        // Extract AgreementPeriod parameter
        AgreementPeriod = queryParams.TryGetValue("AgreementPeriod", out var agreementValue) && int.TryParse(agreementValue, out var agreement) ? agreement : (int?)null;


        // Fetch and filter AllocationTest rows
        FilteredAllocationTests = GenService.GetModel<AllocationTest>()
                .Where(a =>
                    a.Area == Area &&
                    a.Building == BuildingId &&
                    a.AgreementPeriod == AgreementPeriod &&
                    a.Floor == Floor &&
                    a.Active == true
                )
                .ToList();
    }

    private void OnAllocationSelected(AllocationTest allocation)
    {
        SelectedId = allocation.Id;
        SelectedAllocation = allocation;
    }

    // private void NavigateToMealPlan()
    // {
    //     // Prepare URL parameters
    //     var queryParams = new List<string> { AllUrlParameters };

    //     if (SelectedAllocation != null)
    //     {
    //         queryParams.Add($"BedspaceId={SelectedAllocation.Id}");
    //         queryParams.Add($"BedspaceCode={SelectedAllocation.Bedspace}");
    //     }

    //     if (!string.IsNullOrEmpty(SelectedSwapPreference))
    //     {
    //         queryParams.Add($"SwapPreference={SelectedSwapPreference}");
    //     }

    //     // Navigate to stepSevenSelectMealPlan
    //     NavigationManager.NavigateTo($"/stepSevenSelectMealPlan?{string.Join("&", queryParams)}");
    // }
    private void NavigateToMealPlan()
    {
        // Prepare URL parameters
        var queryParams = new List<string> { AllUrlParameters };

        if (SelectedAllocation != null)
        {
            queryParams.Add($"BedspaceId={SelectedAllocation.Id}");
            queryParams.Add($"BedspaceCode={SelectedAllocation.Bedspace}");

            // Include DailyRate in the URL if it exists
            if (SelectedAllocation.DailyRate.HasValue)
            {
                queryParams.Add($"DailyRate={SelectedAllocation.DailyRate.Value}");
            }

            // Include RoomType in the URL if it exists
            if (SelectedAllocation.RoomType.HasValue)
            {
                queryParams.Add($"RoomType={SelectedAllocation.RoomType.Value}");
            }
        }

        if (!string.IsNullOrEmpty(SelectedSwapPreference))
        {
            queryParams.Add($"SwapPreference={SelectedSwapPreference}");
        }

        // Navigate to stepSevenSelectMealPlan
        NavigationManager.NavigateTo($"/stepSevenSelectMealPlan?{string.Join("&", queryParams)}");
    }



    private string GetFormattedBedspace(string bedspace)
    {
        // Ensure bedspace has enough characters
        if (string.IsNullOrEmpty(bedspace) || bedspace.Length < 10)
        {
            return bedspace; // Return the original value if formatting is not possible
        }

        // Extract characters 5 through 8 and 9 through 10
        return $"{bedspace.Substring(4, 4)}-{bedspace.Substring(8, 2)}";
    }
}

<style>
    .button-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
        gap: 10px;
        padding: 10px;
    }

        .button-grid button {
            width: 100%;
            text-align: center;
        }
</style>
