@page "/stepSixSelectBedspace"
@inject NavigationManager NavigationManager
@inject IGenService GenService

<h3>Step Six: Select Bedspace</h3>

<!-- Conditional Image Display -->
@if (Floor == 1100 && Area == 1 && BuildingId == 1)
{
    <div class="text-center">
        <img src="https://reslife-pictures.s3.us-east-1.amazonaws.com/floorplans/HL0B11.gif" alt="Floor Plan" class="img-fluid" />
    </div>
}
else if (Floor == 1200 && Area == 1 && BuildingId == 1)
{
    <div class="text-center">
        <img src="Images/HL0B12.gif" alt="Floor Plan" class="img-fluid" />
    </div>
}
else
{
    <div class="text-center">
        <p>Image not available</p>
    </div>
}

<h4>Filtered Allocation Test Bedspaces:</h4>
@if (FilteredAllocationTests.Any())
{
    <div class="button-grid">
        @foreach (var allocation in FilteredAllocationTests)
        {
            <button class="btn @(SelectedId == allocation.Id ? "btn-success" : "btn-primary")"
                    @onclick="() => OnAllocationSelected(allocation)">
                @GetFormattedBedspace(allocation.Bedspace)
            </button>
        }
    </div>
}
else
{
    <p>No matching Allocation Test rows found.</p>
}

@if (SelectedAllocation != null)
{
    <div class="mt-4">
        <h4>You have selected bedspace @SelectedAllocation.Bedspace</h4>
        <label for="swapPreference">Please select your swap preference:</label>
        <select id="swapPreference" class="form-control" @bind="SelectedSwapPreference">
            <option value="">-- Select --</option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
        </select>
    </div>
}


<svg xmlns="http://www.w3.org/2000/svg" width="100" height="133" viewBox="0 0 100 200">
    <!-- Bed frame -->
    <rect x="20" y="10" width="60" height="120" fill="#8B4513" stroke="#000" stroke-width="2" />
    <!-- Mattress -->
    <rect x="25" y="15" width="50" height="110" fill="#E6E6FA" stroke="#000" stroke-width="2" />
    <!-- Pillow -->
    <rect x="30" y="20" width="40" height="36" fill="#FFFFFF" stroke="#000" stroke-width="1" rx="5" ry="5" />
</svg>

<svg xmlns="http://www.w3.org/2000/svg" width="100" height="133" viewBox="0 0 100 200">
    <!-- Bed frame -->
    <rect x="20" y="70" width="60" height="120" fill="#8B4513" stroke="#000" stroke-width="2" />
    <!-- Mattress -->
    <rect x="25" y="75" width="50" height="110" fill="#E6E6FA" stroke="#000" stroke-width="2" />
    <!-- Pillow -->
    <rect x="30" y="144" width="40" height="36" fill="#FFFFFF" stroke="#000" stroke-width="1" rx="5" ry="5" />
</svg>



<svg xmlns="http://www.w3.org/2000/svg" width="150" height="250" viewBox="0 0 150 250">
    <!-- Room walls -->
    <rect x="10" y="10" width="130" height="230" fill="none" stroke="#000" stroke-width="2" />

    <!-- Gap in top wall for open door -->
    <line x1="10" y1="10" x2="65" y2="10" stroke="#000" stroke-width="2" />
    <line x1="85" y1="10" x2="140" y2="10" stroke="#000" stroke-width="2" />

    <!-- Door (open at 90 degrees) -->
    <line x1="75" y1="10" x2="75" y2="30" stroke="#000" stroke-width="2" />

    <!-- Dotted curve to represent door swing (quarter-circle) -->
    <path d="M75,30 A20,20 0 0,0 95,10" fill="none" stroke="#000" stroke-dasharray="4,4" stroke-width="1" />
</svg>
<svg xmlns="http://www.w3.org/2000/svg" width="50" height="67" viewBox="0 0 100 133">
    <!-- Rotated Rectangle (countertop) -->
    <rect x="25" y="10" width="50" height="30" fill="#C0C0C0" stroke="#000" stroke-width="2" transform="rotate(90,50,50)" />

    <!-- Rotated Oval (sink basin) -->
    <ellipse cx="50" cy="25" rx="15" ry="7.5" fill="#E6E6FA" stroke="#000" stroke-width="2" transform="rotate(90,50,50)" />
</svg>













<!-- URL Parameters Section -->
<div style="position: fixed; bottom: 0; left: 0; right: 0; background-color: #f8f9fa; color: gray; text-align: center; padding: 10px; font-size: small; border-top: 1px solid #ddd;">
    <p>@AllUrlParameters</p>
</div>
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
@code {
    private string AllUrlParameters = string.Empty;
    private List<AllocationTest> FilteredAllocationTests = new();
    private int? Floor { get; set; }
    private int? Area { get; set; }
    private int? BuildingId { get; set; }
    private int? SelectedId { get; set; } // Track the selected button ID
    private AllocationTest? SelectedAllocation { get; set; } // Nullable to avoid initialization warnings
    private string? SelectedSwapPreference { get; set; } // Nullable to avoid initialization warnings

    protected override void OnInitialized()
    {
        // Parse URL parameters
        var uri = new Uri(NavigationManager.Uri);
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        // Combine URL parameters into a string
        AllUrlParameters = string.Join("&", queryParams.Select(kvp => $"{kvp.Key}={kvp.Value}"));

        // Extract Floor parameter
        Floor = queryParams.TryGetValue("Floor", out var floorValue) && int.TryParse(floorValue, out var f) ? f : (int?)null;

        // Extract Area parameter
        Area = queryParams.TryGetValue("Area", out var areaValue) && int.TryParse(areaValue, out var a) ? a : (int?)null;

        // Extract BuildingId parameter
        BuildingId = queryParams.TryGetValue("BuildingId", out var buildingIdValue) && int.TryParse(buildingIdValue, out var bId) ? bId : (int?)null;

        // Extract other relevant URL parameters
        var agreementPeriod = queryParams.TryGetValue("AgreementPeriod", out var agreementPeriodValue) && int.TryParse(agreementPeriodValue, out var ap) ? ap : (int?)null;

        // Fetch and filter AllocationTest rows
        FilteredAllocationTests = GenService.GetModel<AllocationTest>()
            .Where(allocation =>
                allocation.Active == true && // Only rows where Active = true
                (!Area.HasValue || allocation.Area == Area.Value) &&
                (!BuildingId.HasValue || allocation.Building == BuildingId.Value) &&
                (!Floor.HasValue || allocation.Floor == Floor.Value) &&
                (!agreementPeriod.HasValue || allocation.AgreementPeriod == agreementPeriod.Value))
            .ToList();
    }

    private void OnAllocationSelected(AllocationTest allocation)
    {
        SelectedId = allocation.Id;
        SelectedAllocation = allocation;
    }

    private string GetFormattedBedspace(string bedspace)
    {
        // Ensure bedspace has enough characters
        if (string.IsNullOrEmpty(bedspace) || bedspace.Length < 10)
        {
            return bedspace; // Return the original value if formatting is not possible
        }

        // Extract characters 5 through 8 and 9 through 10
        return $"{bedspace.Substring(4, 4)}-{bedspace.Substring(8, 2)}";
    }
}

<style>
    .button-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
        gap: 10px;
        padding: 10px;
    }

        .button-grid button {
            width: 100%;
            text-align: center;
        }
</style>
