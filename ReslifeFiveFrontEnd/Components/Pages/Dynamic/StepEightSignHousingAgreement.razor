@page "/stepEightSignHousingAgreement"
@inject NavigationManager NavigationManager
@inject IGenService GenService

<h3>Step Eight: Sign Housing Agreement</h3>




<p>Area: @AreaDisplayName</p>
<p>NetID: @NetID</p>
<p>Name: @Name</p>
<p>Building: @BuildingName</p>
<p>Bedspace Code: @BedspaceCode</p>
<p>Bedspace Substring (Chars 5–8): @BedspaceSubstring</p>
<p>Bedspace Substring (Chars 9–10): @BedspaceSubstringEnd</p>
<p>Room Type: @RoomTypeDisplay</p>
<p>Agreement Period: @AgreementPeriodDisplay</p>
<p>Selected Start Date: @SelectedStartDateDisplay</p>
<p>Agreement End Date: @AgreementEndDateDisplay</p>
<p>Date Range: @CombinedDateRangeDisplay</p>
<p>Number of Days Difference: @DaysDifferenceDisplay</p>
<p>Daily Rate: @DailyRateDisplay</p>
<p>Total Cost: @TotalCostDisplay</p>
<p>Payment 1 Start Date: @Payment1Start2024FW.ToString("MMMM dd, yyyy")</p>
<p>Payment 1 End Date: @Payment1End2024FW.ToString("MMMM dd, yyyy")</p>

<p>Payment 2 Start Date: @Payment2Start2024FW.ToString("MMMM dd, yyyy")</p>
<p>Payment 2 End Date: @Payment2End2024FW.ToString("MMMM dd, yyyy")</p>

<p>Payment 3 Start Date: @Payment3Start2024FW.ToString("MMMM dd, yyyy")</p>
<p>Payment 3 End Date: @Payment3End2024FW.ToString("MMMM dd, yyyy")</p>

<p>Payment 4 Start Date: @Payment4Start2024FW.ToString("MMMM dd, yyyy")</p>
<p>Payment 4 End Date: @Payment4End2024FW.ToString("MMMM dd, yyyy")</p>

<p>Payment 5 Start Date: @Payment5Start2024FW.ToString("MMMM dd, yyyy")</p>
<p>Payment 5 End Date: @Payment5End2024FW.ToString("MMMM dd, yyyy")</p>

<p>Unbilled Period Start Date: @UnbillStart2024FW.ToString("MMMM dd, yyyy")</p>
<p>Unbilled Period End Date: @UnbillEnd2024FW.ToString("MMMM dd, yyyy")</p>

<p>Payment 6 Start Date: @Payment6Start2024FW.ToString("MMMM dd, yyyy")</p>
<p>Payment 6 End Date: @Payment6End2024FW.ToString("MMMM dd, yyyy")</p>

<p>Payment 7 Start Date: @Payment7Start2024FW.ToString("MMMM dd, yyyy")</p>
<p>Payment 7 End Date: @Payment7End2024FW.ToString("MMMM dd, yyyy")</p>

<p>Payment 8 Start Date: @Payment8Start2024FW.ToString("MMMM dd, yyyy")</p>
<p>Payment 8 End Date: @Payment8End2024FW.ToString("MMMM dd, yyyy")</p>

<p>Payment 9 Start Date: @Payment9Start2024FW.ToString("MMMM dd, yyyy")</p>
<p>Payment 9 End Date: @Payment9End2024FW.ToString("MMMM dd, yyyy")</p>

<p>Payment 10 Start Date: @Payment10Start2024FW.ToString("MMMM dd, yyyy")</p>
<p>Payment 10 End Date: @Payment10End2024FW.ToString("MMMM dd, yyyy")</p>



<!-- Conditional Content Rendering -->
@if (Area == 1 || Area == 2 || Area == 3 || Area == 4)
{
    <div style="width: 100%; height: 100%; border: 0; overflow: hidden;">
        <iframe src="@IframeUrl" style="width: 100%; height: 500px; border: none;"></iframe>
    </div>
}
else
{
    <p>Your contract failed to load, please email Campus Accommodations to receive a link to your contract.</p>
}

@code {
    private string AreaDisplayName = "Not specified";
    private string AgreementPeriodDisplay = "Not specified";
    private string NetID = "Not specified";
    private string Name = "Not specified";
    private string BuildingName = "Not specified";
    private string BedspaceCode = "Not specified";
    private string BedspaceSubstring = "Not specified"; // Characters 5–8
    private string BedspaceSubstringEnd = "Not specified"; // Characters 9–10
    private string IframeUrl = string.Empty;
    private int? Area;
    private string RoomTypeDisplay = "Not specified"; // RoomType property display
    private string SelectedStartDateDisplay = "Not specified";
    private string AgreementEndDateDisplay = "Not specified";
    private string CombinedDateRangeDisplay = "Not specified";
    private string DaysDifferenceDisplay = "Not calculated";
    private string DailyRateDisplay = "Not specified";
    private string TotalCostDisplay = "Not calculated";
    private decimal? DailyRate = null;
    private int DaysDifference = 0;
    private DateTime Payment1Start2024FW;
    private DateTime Payment1End2024FW;
    private DateTime Payment2Start2024FW;
    private DateTime Payment2End2024FW;
    private DateTime Payment3Start2024FW;
    private DateTime Payment3End2024FW;
    private DateTime Payment4Start2024FW;
    private DateTime Payment4End2024FW;
    private DateTime Payment5Start2024FW;
    private DateTime Payment5End2024FW;
    private DateTime UnbillStart2024FW;
    private DateTime UnbillEnd2024FW;
    private DateTime Payment6Start2024FW;
    private DateTime Payment6End2024FW;
    private DateTime Payment7Start2024FW;
    private DateTime Payment7End2024FW;
    private DateTime Payment8Start2024FW;
    private DateTime Payment8End2024FW;
    private DateTime Payment9Start2024FW;
    private DateTime Payment9End2024FW;
    private DateTime Payment10Start2024FW;
    private DateTime Payment10End2024FW;

    protected override void OnInitialized()
    {
        var uri = new Uri(NavigationManager.Uri);
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        DateTime? selectedStartDate = null;
        DateTime? agreementEndDate = null;
        Payment1Start2024FW = new DateTime(2024, 8, 28);
        Payment1End2024FW = new DateTime(2024, 9, 19);

        Payment2Start2024FW = new DateTime(2024, 9, 20);
        Payment2End2024FW = new DateTime(2024, 10, 12);

        Payment3Start2024FW = new DateTime(2024, 10, 13);
        Payment3End2024FW = new DateTime(2024, 11, 4);

        Payment4Start2024FW = new DateTime(2024, 11, 5);
        Payment4End2024FW = new DateTime(2024, 11, 27);

        Payment5Start2024FW = new DateTime(2024, 11, 28);
        Payment5End2024FW = new DateTime(2024, 12, 19);

        UnbillStart2024FW = new DateTime(2024, 12, 20);
        UnbillEnd2024FW = new DateTime(2025, 1, 5);

        Payment6Start2024FW = new DateTime(2025, 1, 6);
        Payment6End2024FW = new DateTime(2025, 1, 27);

        Payment7Start2024FW = new DateTime(2025, 1, 28);
        Payment7End2024FW = new DateTime(2025, 2, 18);

        Payment8Start2024FW = new DateTime(2025, 2, 19);
        Payment8End2024FW = new DateTime(2025, 3, 12);

        Payment9Start2024FW = new DateTime(2025, 3, 13);
        Payment9End2024FW = new DateTime(2025, 4, 3);

        Payment10Start2024FW = new DateTime(2025, 4, 4);
        Payment10End2024FW = new DateTime(2025, 4, 26);


        // Parse DailyRate
        if (queryParams.TryGetValue("DailyRate", out var dailyRateValue) && decimal.TryParse(dailyRateValue, out var parsedDailyRate))
        {
            DailyRate = parsedDailyRate;
            DailyRateDisplay = $"${parsedDailyRate:F2}"; // Format as currency
        }

        // Parse Selected Start Date
        if (queryParams.TryGetValue("SelectedStartDate", out var selectedStartDateValue) && DateTime.TryParse(selectedStartDateValue, out var parsedStartDate))
        {
            selectedStartDate = parsedStartDate;
            SelectedStartDateDisplay = parsedStartDate.ToString("MMMM dd, yyyy");
        }

        // Parse Agreement End Date
        if (queryParams.TryGetValue("AgreementEndDate", out var agreementEndDateValue) && DateTime.TryParse(agreementEndDateValue, out var parsedEndDate))
        {
            agreementEndDate = parsedEndDate;
            AgreementEndDateDisplay = parsedEndDate.ToString("MMMM dd, yyyy");
        }

        // Calculate Days Difference and Total Cost
        if (selectedStartDate.HasValue && agreementEndDate.HasValue)
        {
            DaysDifference = (agreementEndDate.Value - selectedStartDate.Value).Days;
            CombinedDateRangeDisplay = $"{SelectedStartDateDisplay} - {AgreementEndDateDisplay} ({DaysDifference} days)";
            DaysDifferenceDisplay = DaysDifference.ToString();

            if (DailyRate.HasValue)
            {
                var totalCost = DailyRate.Value * DaysDifference;
                TotalCostDisplay = $"${totalCost:F2}"; // Format as currency
            }
            else
            {
                TotalCostDisplay = "Daily rate not specified";
            }
        }
        else
        {
            DaysDifferenceDisplay = "Invalid or missing dates";
            TotalCostDisplay = "Total cost cannot be calculated";
        }

        // Combine Dates into a Single String and Calculate Days Difference
        if (selectedStartDate.HasValue && agreementEndDate.HasValue)
        {
            var daysDifference = (agreementEndDate.Value - selectedStartDate.Value).Days;
            CombinedDateRangeDisplay = $"{SelectedStartDateDisplay} - {AgreementEndDateDisplay} ({daysDifference} days)";
            DaysDifferenceDisplay = daysDifference.ToString(); // Set the days difference
        }
        else
        {
            DaysDifferenceDisplay = "Invalid or missing dates"; // Handle missing or invalid dates
        }

        // Parse Area
        if (queryParams.TryGetValue("Area", out var areaValue) && int.TryParse(areaValue.ToString(), out var area))
        {
            Area = area;
            AreaDisplayName = area switch
            {
                1 => "Helaman Halls",
                2 => "Heritage Halls",
                3 => "Riviera",
                4 => "Wyview Park",
                _ => "Unknown Area"
            };
        }

        // Parse Agreement Period
        if (queryParams.TryGetValue("AgreementPeriod", out var agreementPeriodValue) && int.TryParse(agreementPeriodValue.ToString(), out var agreementPeriod))
        {
            AgreementPeriodDisplay = agreementPeriod switch
            {
                1 => "Spring 2024",
                2 => "Summer 2024",
                3 => "Fall Winter 2024",
                4 => "Winter 2025",
                5 => "Spring 2025",
                6 => "Summer 2025",
                7 => "Fall Winter 2025",
                8 => "Winter 2026",
                9 => "Spring 2026",
                10 => "Summer 2026",
                11 => "Fall Winter 2026",
                12 => "Winter 2027",
                _ => "Unknown Agreement Period"
            };
        }

        // Parse Room Type
        if (queryParams.TryGetValue("RoomType", out var roomTypeValue) && int.TryParse(roomTypeValue.ToString(), out var roomType))
        {
            RoomTypeDisplay = roomType switch
            {
                1 => "Rate 1",
                2 => "Rate 2",
                _ => roomType.ToString()
            };
        }

        // Determine the base IframeUrl
        IframeUrl = Area switch
        {
            1 or 2 => "https://byusign.na2.adobesign.com/public/esignWidget?wid=CBFCIBAA3AAABLblqZhB3CgMCc6i3412faQKEurYXc9N5vLkQEIcvpUSIL2F7Oz9Pazk4i0IiIV5YcP3bn00*&hosted=false",
            3 => "https://byusign.na2.adobesign.com/public/esignWidget?wid=CBFCIBAA3AAABLblqZhAQCbVuh79M68kYqamuClVSItha_HAl8uKyfcTamujsq8Y6j8ues4zSay52jMwfw2Y*&hosted=false",
            4 => "https://byusign.na2.adobesign.com/public/esignWidget?wid=CBFCIBAA3AAABLblqZhBn0uBgbNHLLKuRWU51P2NsZPYMroyrKEU-Wq_hJ7y7I3MbvKdPdQc4SSsx9jk7-ok*&hosted=false",
            _ => string.Empty
        };

        if (!string.IsNullOrEmpty(IframeUrl))
        {
            // Add parameters dynamically to the IFrame URL
            if (queryParams.TryGetValue("Name", out var nameValue))
            {
                Name = nameValue.ToString() ?? "Not specified";
                IframeUrl += $"#P1={Uri.EscapeDataString(Name)}";
            }

            if (queryParams.TryGetValue("NetID", out var netIDValue))
            {
                NetID = netIDValue.ToString() ?? "Not specified";
                IframeUrl += $"&P2={Uri.EscapeDataString(NetID)}";
            }

            if (queryParams.TryGetValue("BuildingId", out var buildingIdValue) && int.TryParse(buildingIdValue.ToString(), out var buildingId))
            {
                var building = Buildings.FirstOrDefault(b => b.Id == buildingId);
                BuildingName = building?.Name ?? "Not specified";
                IframeUrl += $"&P4={Uri.EscapeDataString(BuildingName)}";
            }

            if (queryParams.TryGetValue("BedspaceCode", out var bedspaceValue))
            {
                BedspaceCode = bedspaceValue.ToString() ?? "Not specified";
                BedspaceSubstring = BedspaceCode.Length >= 8 ? BedspaceCode.Substring(4, 4) : "Invalid";
                BedspaceSubstringEnd = BedspaceCode.Length >= 10 ? BedspaceCode.Substring(8, 2) : "Invalid";

                IframeUrl += $"&P5={Uri.EscapeDataString(BedspaceSubstring)}";
                IframeUrl += $"&P6={Uri.EscapeDataString(BedspaceSubstringEnd)}";
            }

            if (Area.HasValue)
            {
                IframeUrl += $"&P3={Uri.EscapeDataString(AreaDisplayName)}";
            }
            if (!string.IsNullOrEmpty(RoomTypeDisplay))
            {
                var calculatedRateType = RoomTypeDisplay; // Assuming RoomTypeDisplay contains the calculated string
                IframeUrl += $"&P7={Uri.EscapeDataString(calculatedRateType)}";
            }
            if (!string.IsNullOrEmpty(AgreementPeriodDisplay))
            {
                IframeUrl += $"&P8={Uri.EscapeDataString(AgreementPeriodDisplay)}";
            }
            if (!string.IsNullOrEmpty(CombinedDateRangeDisplay))
            {
                IframeUrl += $"&P9={Uri.EscapeDataString(CombinedDateRangeDisplay)}";
            }
            if (!string.IsNullOrEmpty(TotalCostDisplay))
            {
                IframeUrl += $"&P10={Uri.EscapeDataString(TotalCostDisplay)}";
            }


        }
    }

    private class Building
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }

    private List<Building> Buildings = new()
    {
        new Building { Id = 1, Name = "Hinckley" },
        new Building { Id = 2, Name = "Chipman" },
        new Building { Id = 3, Name = "David John" },
        new Building { Id = 4, Name = "Taylor" },
        new Building { Id = 5, Name = "Stover" },
        new Building { Id = 6, Name = "Budge" },
        new Building { Id = 7, Name = "Merrill" },
        new Building { Id = 8, Name = "May" },
        new Building { Id = 9, Name = "Building 9" },
        new Building { Id = 10, Name = "HR 02" },
        new Building { Id = 11, Name = "HR 03" },
        new Building { Id = 12, Name = "HR 04" },
        new Building { Id = 13, Name = "HR 05" },
        new Building { Id = 14, Name = "HR 06" },
        new Building { Id = 15, Name = "HR 07" },
        new Building { Id = 16, Name = "HR 08" },
        new Building { Id = 17, Name = "HR 09" },
        new Building { Id = 18, Name = "HR 10" },
        new Building { Id = 19, Name = "HR 11" },
        new Building { Id = 20, Name = "HR 12" },
        new Building { Id = 21, Name = "HR 13" },
        new Building { Id = 22, Name = "HR 14" },
        new Building { Id = 23, Name = "HR 15" },
        new Building { Id = 24, Name = "HR 16" },
        new Building { Id = 25, Name = "RI A" },
        new Building { Id = 26, Name = "RI B" },
        new Building { Id = 27, Name = "RI C" },
        new Building { Id = 28, Name = "RI D" },
        new Building { Id = 29, Name = "RI E" },
        new Building { Id = 30, Name = "RI F" },
        new Building { Id = 31, Name = "RI G" },
        new Building { Id = 32, Name = "RI H" },
        new Building { Id = 33, Name = "RI I" },
        new Building { Id = 34, Name = "RI J" },
        new Building { Id = 35, Name = "RI K" },
        new Building { Id = 36, Name = "RI L" },
        new Building { Id = 37, Name = "RI O" },
        new Building { Id = 38, Name = "LI A" },
        new Building { Id = 39, Name = "LI B" },
        new Building { Id = 40, Name = "LI C" },
        new Building { Id = 41, Name = "LI D" },
        new Building { Id = 42, Name = "LI E" },
        new Building { Id = 43, Name = "WP 1" },
        new Building { Id = 44, Name = "WP 2" },
        new Building { Id = 45, Name = "WP 3" },
        new Building { Id = 46, Name = "WP 4" },
        new Building { Id = 47, Name = "WP 5" },
        new Building { Id = 48, Name = "WP 6" },
        new Building { Id = 49, Name = "WP 7" },
        new Building { Id = 50, Name = "WP 8" },
        new Building { Id = 51, Name = "WP 9" },
        new Building { Id = 52, Name = "WP 10" },
        new Building { Id = 53, Name = "WP 11" }
    };
}
