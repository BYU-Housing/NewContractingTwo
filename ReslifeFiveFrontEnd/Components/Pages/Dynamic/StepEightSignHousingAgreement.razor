@page "/stepEightSignHousingAgreement"
@inject NavigationManager NavigationManager
@inject IGenService GenService

<h3>Step Eight: Sign Housing Agreement</h3>




<p>Area: @AreaDisplayName</p>
<p>NetID: @NetID</p>
<p>Name: @Name</p>
<p>Building: @BuildingName</p>
<p>Bedspace Code: @BedspaceCode</p>
<p>Bedspace Substring (Chars 5–8): @BedspaceSubstring</p>
<p>Bedspace Substring (Chars 9–10): @BedspaceSubstringEnd</p>
<p>Room Type: @RoomTypeDisplay</p>
<p>Agreement Period: @AgreementPeriodDisplay</p>
<p>Selected Start Date: @SelectedStartDateDisplay</p>
<p>Agreement End Date: @AgreementEndDateDisplay</p>
<p>Date Range: @CombinedDateRangeDisplay</p>
<p>Number of Days Difference: @DaysDifferenceDisplay</p>
<p>Daily Rate: @DailyRateDisplay</p>
<p>Total Cost: @TotalCostDisplay</p>
<p>Payment 1 Start Date: @Payment1Start2024FW.ToString("MMMM dd, yyyy")</p>
<p>Payment 1 End Date: @Payment1End2024FW.ToString("MMMM dd, yyyy")</p>
<p>Payment 1 Duration: @Payment1Days days</p>
<p>Period 1 Days: @Period1Days</p>
<p>Period 1 Total Cost: @(Period1Total.HasValue ? $"${Period1Total:F2}" : "Not calculated")</p>
<p>Period 1 Days (from Payment1Start): @Period1DaysFromPaymentStart</p>
<p>Period 1 Total Cost (from Payment1Start): @(Period1TotalFromPaymentStart.HasValue ? $"${Period1TotalFromPaymentStart:F2}" : "Not calculated")</p>


<p>Payment 2 Start Date: @Payment2Start2024FW.ToString("MMMM dd, yyyy")</p>
<p>Payment 2 End Date: @Payment2End2024FW.ToString("MMMM dd, yyyy")</p>
<p>Period 2 Days: @Period2Days</p>
<p>Period 2 Total Cost: @(Period2Total.HasValue ? $"${Period2Total:F2}" : "Not calculated")</p>
<p>Period 2 Days (from Payment2Start): @Period2DaysFromPaymentStart</p>
<p>Period 2 Total Cost (from Payment2Start): @(Period2TotalFromPaymentStart.HasValue ? $"${Period2TotalFromPaymentStart:F2}" : "Not calculated")</p>


<p>Payment 3 Start Date: @Payment3Start2024FW.ToString("MMMM dd, yyyy")</p>
<p>Payment 3 End Date: @Payment3End2024FW.ToString("MMMM dd, yyyy")</p>
<p>Period 3 Days: @Period3Days</p>
<p>Period 3 Total Cost: @(Period3Total.HasValue ? $"${Period3Total:F2}" : "Not calculated")</p>
<p>Period 3 Days (from Payment3Start): @Period3DaysFromPaymentStart</p>
<p>Period 3 Total Cost (from Payment3Start): @(Period3TotalFromPaymentStart.HasValue ? $"${Period3TotalFromPaymentStart:F2}" : "Not calculated")</p>


<p>Payment 4 Start Date: @Payment4Start2024FW.ToString("MMMM dd, yyyy")</p>
<p>Payment 4 End Date: @Payment4End2024FW.ToString("MMMM dd, yyyy")</p>
<p>Period 4 Days: @Period4Days</p>
<p>Period 4 Total Cost: @(Period4Total.HasValue ? $"${Period4Total:F2}" : "Not calculated")</p>
<p>Period 4 Days (from Payment4Start): @Period4DaysFromPaymentStart</p>
<p>Period 4 Total Cost (from Payment4Start): @(Period4TotalFromPaymentStart.HasValue ? $"${Period4TotalFromPaymentStart:F2}" : "Not calculated")</p>


<p>Payment 5 Start Date: @Payment5Start2024FW.ToString("MMMM dd, yyyy")</p>
<p>Payment 5 End Date: @Payment5End2024FW.ToString("MMMM dd, yyyy")</p>
<p>Period 5 Days: @Period5Days</p>
<p>Period 5 Total Cost: @(Period5Total.HasValue ? $"${Period5Total:F2}" : "Not calculated")</p>
<p>Period 5 Days (from Payment5Start): @Period5DaysFromPaymentStart</p>
<p>Period 5 Total Cost (from Payment5Start): @(Period5TotalFromPaymentStart.HasValue ? $"${Period5TotalFromPaymentStart:F2}" : "Not calculated")</p>


<p>Unbilled Period Start Date: @UnbillStart2024FW.ToString("MMMM dd, yyyy")</p>
<p>Unbilled Period End Date: @UnbillEnd2024FW.ToString("MMMM dd, yyyy")</p>

<p>Payment 6 Start Date: @Payment6Start2024FW.ToString("MMMM dd, yyyy")</p>
<p>Payment 6 End Date: @Payment6End2024FW.ToString("MMMM dd, yyyy")</p>

<p>Period 6 Days: @Period6Days</p>
<p>Period 6 Total Cost: @(Period6Total.HasValue ? $"${Period6Total:F2}" : "Not calculated")</p>
<p>Period 6 Days (from Payment6Start): @Period6DaysFromPaymentStart</p>
<p>Period 6 Total Cost (from Payment6Start): @(Period6TotalFromPaymentStart.HasValue ? $"${Period6TotalFromPaymentStart:F2}" : "Not calculated")</p>


<p>Payment 7 Start Date: @Payment7Start2024FW.ToString("MMMM dd, yyyy")</p>
<p>Payment 7 End Date: @Payment7End2024FW.ToString("MMMM dd, yyyy")</p>

<p>Period 7 Days: @Period7Days</p>
<p>Period 7 Total Cost: @(Period7Total.HasValue ? $"${Period7Total:F2}" : "Not calculated")</p>
<p>Period 7 Days (from Payment7Start): @Period7DaysFromPaymentStart</p>
<p>Period 7 Total Cost (from Payment7Start): @(Period7TotalFromPaymentStart.HasValue ? $"${Period7TotalFromPaymentStart:F2}" : "Not calculated")</p>


<p>Payment 8 Start Date: @Payment8Start2024FW.ToString("MMMM dd, yyyy")</p>
<p>Payment 8 End Date: @Payment8End2024FW.ToString("MMMM dd, yyyy")</p>

<p>Period 8 Days: @Period8Days</p>
<p>Period 8 Total Cost: @(Period8Total.HasValue ? $"${Period8Total:F2}" : "Not calculated")</p>
<p>Period 8 Days (from Payment8Start): @Period8DaysFromPaymentStart</p>
<p>Period 8 Total Cost (from Payment8Start): @(Period8TotalFromPaymentStart.HasValue ? $"${Period8TotalFromPaymentStart:F2}" : "Not calculated")</p>


<p>Payment 9 Start Date: @Payment9Start2024FW.ToString("MMMM dd, yyyy")</p>
<p>Payment 9 End Date: @Payment9End2024FW.ToString("MMMM dd, yyyy")</p>

<p>Period 9 Days: @Period9Days</p>
<p>Period 9 Total Cost: @(Period9Total.HasValue ? $"${Period9Total:F2}" : "Not calculated")</p>
<p>Period 9 Days (from Payment9Start): @Period9DaysFromPaymentStart</p>
<p>Period 9 Total Cost (from Payment9Start): @(Period9TotalFromPaymentStart.HasValue ? $"${Period9TotalFromPaymentStart:F2}" : "Not calculated")</p>

<p>Payment 10 Start Date: @Payment10Start2024FW.ToString("MMMM dd, yyyy")</p>
<p>Payment 10 End Date: @Payment10End2024FW.ToString("MMMM dd, yyyy")</p>

<p>Period 10 Days: @Period10Days</p>
<p>Period 10 Total Cost: @(Period10Total.HasValue ? $"${Period10Total:F2}" : "Not calculated")</p>
<p>Period 10 Days (from Payment10Start): @Period10DaysFromPaymentStart</p>
<p>Period 10 Total Cost (from Payment10Start): @(Period10TotalFromPaymentStart.HasValue ? $"${Period10TotalFromPaymentStart:F2}" : "Not calculated")</p>

<p>Total Billable Days: @TotalBillable</p>
<p>Total Billable Amount: @(TotalBillableMoney.HasValue ? $"${TotalBillableMoney.Value:F2}" : "Not calculated")</p>


<!-- Conditional Content Rendering -->
@if (Area == 1 || Area == 2 || Area == 3 || Area == 4)
{
    <div style="width: 100%; height: 100%; border: 0; overflow: hidden;">
        <iframe src="@IframeUrl" style="width: 100%; height: 500px; border: none;"></iframe>
    </div>
}
else
{
    <p>Your contract failed to load, please email Campus Accommodations to receive a link to your contract.</p>
}

<!-- Navigation Button -->
<div style="margin-top: 20px; text-align: center;">
    <button class="btn btn-primary" @onclick="NavigateToMealPlanAgreement">
        Proceed to Step Nine: Sign Meal Plan Agreement
    </button>
</div>

@code {
    private string AreaDisplayName = "Not specified";
    private string AgreementPeriodDisplay = "Not specified";
    private string NetID = "Not specified";
    private string Name = "Not specified";
    private string BuildingName = "Not specified";
    private string BedspaceCode = "Not specified";
    private string BedspaceSubstring = "Not specified"; // Characters 5–8
    private string BedspaceSubstringEnd = "Not specified"; // Characters 9–10
    private string IframeUrl = string.Empty;
    private int? Area;
    private string RoomTypeDisplay = "Not specified"; // RoomType property display
    private string SelectedStartDateDisplay = "Not specified";
    private string AgreementEndDateDisplay = "Not specified";
    private string CombinedDateRangeDisplay = "Not specified";
    private string DaysDifferenceDisplay = "Not calculated";
    private string DailyRateDisplay = "Not specified";
    private string TotalCostDisplay = "Not calculated";
    private decimal? DailyRate = null;
    private int DaysDifference = 0;
    private DateTime Payment1Start2024FW;
    private DateTime Payment1End2024FW;
    private DateTime Payment2Start2024FW;
    private DateTime Payment2End2024FW;
    private DateTime Payment3Start2024FW;
    private DateTime Payment3End2024FW;
    private DateTime Payment4Start2024FW;
    private DateTime Payment4End2024FW;
    private DateTime Payment5Start2024FW;
    private DateTime Payment5End2024FW;
    private DateTime UnbillStart2024FW;
    private DateTime UnbillEnd2024FW;
    private DateTime Payment6Start2024FW;
    private DateTime Payment6End2024FW;
    private DateTime Payment7Start2024FW;
    private DateTime Payment7End2024FW;
    private DateTime Payment8Start2024FW;
    private DateTime Payment8End2024FW;
    private DateTime Payment9Start2024FW;
    private DateTime Payment9End2024FW;
    private DateTime Payment10Start2024FW;
    private DateTime Payment10End2024FW;
    private int Payment1Days;
    private int Period1Days;
    private decimal? Period1Total;
    private int Period1DaysFromPaymentStart;
    private decimal? Period1TotalFromPaymentStart;
    private int Period2Days;
    private decimal? Period2Total;
    private int Period2DaysFromPaymentStart;
    private decimal? Period2TotalFromPaymentStart;

    private int Period3Days;
    private decimal? Period3Total;
    private int Period3DaysFromPaymentStart;
    private decimal? Period3TotalFromPaymentStart;

    private int Period4Days;
    private decimal? Period4Total;
    private int Period4DaysFromPaymentStart;
    private decimal? Period4TotalFromPaymentStart;

    private int Period5Days;
    private decimal? Period5Total;
    private int Period5DaysFromPaymentStart;
    private decimal? Period5TotalFromPaymentStart;


    private int Period6Days;
    private decimal? Period6Total;
    private int Period6DaysFromPaymentStart;
    private decimal? Period6TotalFromPaymentStart;
    private int Period7Days;
    private decimal? Period7Total;
    private int Period7DaysFromPaymentStart;
    private decimal? Period7TotalFromPaymentStart;
    private int Period8Days;
    private decimal? Period8Total;
    private int Period8DaysFromPaymentStart;
    private decimal? Period8TotalFromPaymentStart;
    private int Period9Days;
    private decimal? Period9Total;
    private int Period9DaysFromPaymentStart;
    private decimal? Period9TotalFromPaymentStart;
    private int Period10Days;
    private decimal? Period10Total;
    private int Period10DaysFromPaymentStart;
    private decimal? Period10TotalFromPaymentStart;

    private int TotalBillable { get; set; } // Stores the total number of billable days
    private decimal? TotalBillableMoney; // Nullable to handle cases where the calculation is invalid




    protected override void OnInitialized()
    {
        var uri = new Uri(NavigationManager.Uri);
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        DateTime? selectedStartDate = null;
        DateTime? agreementEndDate = null;
        Payment1Start2024FW = new DateTime(2024, 8, 28);
        Payment1End2024FW = new DateTime(2024, 9, 19);
        Payment1Days = (Payment1End2024FW - Payment1Start2024FW).Days + 1;
        string payment1Range = $"{Payment1Start2024FW:MMMM dd, yyyy} - {Payment1End2024FW:MMMM dd, yyyy}";

        Payment2Start2024FW = new DateTime(2024, 9, 20);
        Payment2End2024FW = new DateTime(2024, 10, 12);
        string payment2Range = $"{Payment2Start2024FW:MMMM dd, yyyy} - {Payment2End2024FW:MMMM dd, yyyy}";

        Payment3Start2024FW = new DateTime(2024, 10, 13);
        Payment3End2024FW = new DateTime(2024, 11, 4);
        string payment3Range = $"{Payment3Start2024FW:MMMM dd, yyyy} - {Payment3End2024FW:MMMM dd, yyyy}";

        Payment4Start2024FW = new DateTime(2024, 11, 5);
        Payment4End2024FW = new DateTime(2024, 11, 27);
        string payment4Range = $"{Payment4Start2024FW:MMMM dd, yyyy} - {Payment4End2024FW:MMMM dd, yyyy}";

        Payment5Start2024FW = new DateTime(2024, 11, 28);
        Payment5End2024FW = new DateTime(2024, 12, 19);
        string payment5Range = $"{Payment5Start2024FW:MMMM dd, yyyy} - {Payment5End2024FW:MMMM dd, yyyy}";

        UnbillStart2024FW = new DateTime(2024, 12, 20);
        UnbillEnd2024FW = new DateTime(2025, 1, 5);

        Payment6Start2024FW = new DateTime(2025, 1, 6);
        Payment6End2024FW = new DateTime(2025, 1, 27);
        string payment6Range = $"{Payment6Start2024FW:MMMM dd, yyyy} - {Payment6End2024FW:MMMM dd, yyyy}";

        Period6DaysFromPaymentStart = (Payment6End2024FW - Payment6Start2024FW).Days;

        Payment7Start2024FW = new DateTime(2025, 1, 28);
        Payment7End2024FW = new DateTime(2025, 2, 18);
        string payment7Range = $"{Payment7Start2024FW:MMMM dd, yyyy} - {Payment7End2024FW:MMMM dd, yyyy}";

        Payment8Start2024FW = new DateTime(2025, 2, 19);
        Payment8End2024FW = new DateTime(2025, 3, 12);
        string payment8Range = $"{Payment8Start2024FW:MMMM dd, yyyy} - {Payment8End2024FW:MMMM dd, yyyy}";

        Payment9Start2024FW = new DateTime(2025, 3, 13);
        Payment9End2024FW = new DateTime(2025, 4, 3);
        string payment9Range = $"{Payment9Start2024FW:MMMM dd, yyyy} - {Payment9End2024FW:MMMM dd, yyyy}";

        Payment10Start2024FW = new DateTime(2025, 4, 4);
        Payment10End2024FW = new DateTime(2025, 4, 26);
        string payment10Range = $"{Payment10Start2024FW:MMMM dd, yyyy} - {Payment10End2024FW:MMMM dd, yyyy}";


        // Parse DailyRate
        if (queryParams.TryGetValue("DailyRate", out var dailyRateValue) && decimal.TryParse(dailyRateValue, out var parsedDailyRate))
        {
            DailyRate = parsedDailyRate;
            DailyRateDisplay = $"${parsedDailyRate:F2}"; // Format as currency
        }

        // Parse Selected Start Date
        if (queryParams.TryGetValue("SelectedStartDate", out var selectedStartDateValue) && DateTime.TryParse(selectedStartDateValue, out var parsedStartDate))
        {
            selectedStartDate = parsedStartDate;
            SelectedStartDateDisplay = parsedStartDate.ToString("MMMM dd, yyyy");
        }

        // Parse Agreement End Date
        if (queryParams.TryGetValue("AgreementEndDate", out var agreementEndDateValue) && DateTime.TryParse(agreementEndDateValue, out var parsedEndDate))
        {
            agreementEndDate = parsedEndDate;
            AgreementEndDateDisplay = parsedEndDate.ToString("MMMM dd, yyyy");
        }

        // Calculate Days Difference and Total Cost for Period 6
        if (selectedStartDate.HasValue)
        {
            // Use Payment6End2024FW as the end date
            var endDate = Payment6End2024FW;
            Period6Days = (endDate - selectedStartDate.Value).Days + 2;
            CombinedDateRangeDisplay = $"{SelectedStartDateDisplay} - {endDate.ToString("MMMM dd, yyyy")} ({Period6Days} days)";
            DaysDifferenceDisplay = Period6Days.ToString();

            if (DailyRate.HasValue)
            {
                Period6Total = DailyRate.Value * Period6Days;
                TotalCostDisplay = $"${Period6Total:F2}"; // Format as currency
            }
            else
            {
                TotalCostDisplay = "Daily rate not specified";
                Period6Total = null;
            }
            Period6DaysFromPaymentStart = (Payment6End2024FW - Payment6Start2024FW).Days +1;
            if (DailyRate.HasValue)
            {
                Period6TotalFromPaymentStart = DailyRate.Value * Period6DaysFromPaymentStart;
            }
            else
            {
                Period6TotalFromPaymentStart = null;
            }
        }
        else
        {
            DaysDifferenceDisplay = "Invalid or missing dates";
            TotalCostDisplay = "Total cost cannot be calculated";
            Period6Days = 0;
            Period6Total = null;
        }
        // Calculate Period7Days and Period7Total using selectedStartDate
        if (selectedStartDate.HasValue)
        {
            var endDate = Payment7End2024FW;
            Period7Days = (endDate - selectedStartDate.Value).Days + 1; // Include start and end dates
            if (DailyRate.HasValue)
            {
                Period7Total = DailyRate.Value * Period7Days;
            }
            else
            {
                Period7Total = null;
            }
        }

        // Calculate Period7DaysFromPaymentStart and Period7TotalFromPaymentStart
        Period7DaysFromPaymentStart = (Payment7End2024FW - Payment7Start2024FW).Days + 1; // Include start and end dates
        if (DailyRate.HasValue)
        {
            Period7TotalFromPaymentStart = DailyRate.Value * Period7DaysFromPaymentStart;
        }
        else
        {
            Period7TotalFromPaymentStart = null;
        }

        // Calculate Days Difference and Total Cost
        if (selectedStartDate.HasValue && agreementEndDate.HasValue)
        {
            if (selectedStartDate <= agreementEndDate)
            {
                // Calculate total days, excluding the end date
                DaysDifference = (agreementEndDate.Value - selectedStartDate.Value).Days;

                // Calculate unbillable days
                int unbillableDays = 0;

                if (selectedStartDate <= UnbillEnd2024FW && agreementEndDate >= UnbillStart2024FW)
                {
                    // Determine the overlapping unbillable period
                    var unbillableStart = selectedStartDate.Value > UnbillStart2024FW ? selectedStartDate.Value : UnbillStart2024FW;
                    var unbillableEnd = agreementEndDate.Value < UnbillEnd2024FW ? agreementEndDate.Value : UnbillEnd2024FW;

                    // Calculate unbillable days (excluding the end date)
                    unbillableDays = (unbillableEnd - unbillableStart).Days;
                }

                // Subtract unbillable days
                TotalBillable = DaysDifference - unbillableDays;

                // Calculate the total cost based on billable days
                TotalBillableMoney = null; // Reset before calculation
                if (DailyRate.HasValue && TotalBillable > 0)
                {
                    TotalBillableMoney = DailyRate.Value * TotalBillable; // Store calculation
                    TotalCostDisplay = $"${TotalBillableMoney.Value:F2}";
                }
                else
                {
                    TotalCostDisplay = "Total cost cannot be calculated";
                }

                // Update displays
                CombinedDateRangeDisplay = $"{SelectedStartDateDisplay} - {AgreementEndDateDisplay} ({DaysDifference} days)";
                DaysDifferenceDisplay = DaysDifference.ToString();
            }
            else
            {
                DaysDifferenceDisplay = "Invalid date range";
                TotalCostDisplay = "Invalid total cost";
                TotalBillable = 0; // Set to 0 for invalid ranges
                TotalBillableMoney = null; // Clear calculation for invalid ranges
            }
        }
        else
        {
            DaysDifferenceDisplay = "Invalid or missing dates";
            TotalCostDisplay = "Total cost cannot be calculated";
            TotalBillable = 0; // Set to 0 for missing dates
            TotalBillableMoney = null; // Clear calculation for missing dates
        }






        // Calculate Days Difference and Total Cost for Period 8
        if (selectedStartDate.HasValue)
        {
            // Calculate using selected start date
            var endDate = Payment8End2024FW;
            Period8Days = (endDate - selectedStartDate.Value).Days + 1; // Include start and end date
            CombinedDateRangeDisplay = $"{SelectedStartDateDisplay} - {endDate.ToString("MMMM dd, yyyy")} ({Period8Days} days)";
            DaysDifferenceDisplay = Period8Days.ToString();

            // Calculate total cost using daily rate
            if (DailyRate.HasValue)
            {
                Period8Total = DailyRate.Value * Period8Days;
                TotalCostDisplay = $"${Period8Total:F2}";
            }
            else
            {
                TotalCostDisplay = "Daily rate not specified";
                Period8Total = null;
            }

            // Calculate using Payment8Start2024FW
            Period8DaysFromPaymentStart = (Payment8End2024FW - Payment8Start2024FW).Days + 1; // Include start and end date
            if (DailyRate.HasValue)
            {
                Period8TotalFromPaymentStart = DailyRate.Value * Period8DaysFromPaymentStart;
            }
            else
            {
                Period8TotalFromPaymentStart = null;
            }
        }
        else
        {
            // Handle missing or invalid selected start date
            DaysDifferenceDisplay = "Invalid or missing dates";
            TotalCostDisplay = "Total cost cannot be calculated";
            Period8Days = 0;
            Period8Total = null;
            Period8DaysFromPaymentStart = 0;
            Period8TotalFromPaymentStart = null;
        }

        // Calculate Days Difference and Total Cost for Period 9
        if (selectedStartDate.HasValue)
        {
            // Calculate using selected start date
            var endDate = Payment9End2024FW;
            Period9Days = (endDate - selectedStartDate.Value).Days + 1; // Include start and end date
            CombinedDateRangeDisplay = $"{SelectedStartDateDisplay} - {endDate.ToString("MMMM dd, yyyy")} ({Period9Days} days)";
            DaysDifferenceDisplay = Period9Days.ToString();

            // Calculate total cost using daily rate
            if (DailyRate.HasValue)
            {
                Period9Total = DailyRate.Value * Period9Days;
                TotalCostDisplay = $"${Period9Total:F2}";
            }
            else
            {
                TotalCostDisplay = "Daily rate not specified";
                Period9Total = null;
            }

            // Calculate using Payment9Start2024FW
            Period9DaysFromPaymentStart = (Payment9End2024FW - Payment9Start2024FW).Days + 1; // Include start and end date
            if (DailyRate.HasValue)
            {
                Period9TotalFromPaymentStart = DailyRate.Value * Period9DaysFromPaymentStart;
            }
            else
            {
                Period9TotalFromPaymentStart = null;
            }
        }
        else
        {
            // Handle missing or invalid selected start date
            DaysDifferenceDisplay = "Invalid or missing dates";
            TotalCostDisplay = "Total cost cannot be calculated";
            Period9Days = 0;
            Period9Total = null;
            Period9DaysFromPaymentStart = 0;
            Period9TotalFromPaymentStart = null;
        }

        // Calculate Days Difference and Total Cost for Period 10
        if (selectedStartDate.HasValue)
        {
            // Calculate using selected start date
            var endDate = Payment10End2024FW;
            Period10Days = (endDate - selectedStartDate.Value).Days + 1; // Include start and end date
            CombinedDateRangeDisplay = $"{SelectedStartDateDisplay} - {endDate.ToString("MMMM dd, yyyy")} ({Period10Days} days)";
            DaysDifferenceDisplay = Period10Days.ToString();

            // Calculate total cost using daily rate
            if (DailyRate.HasValue)
            {
                Period10Total = DailyRate.Value * Period10Days;
                TotalCostDisplay = $"${Period10Total:F2}";
            }
            else
            {
                TotalCostDisplay = "Daily rate not specified";
                Period10Total = null;
            }

            // Calculate using Payment10Start2024FW
            Period10DaysFromPaymentStart = (Payment10End2024FW - Payment10Start2024FW).Days + 1; // Include start and end date
            if (DailyRate.HasValue)
            {
                Period10TotalFromPaymentStart = DailyRate.Value * Period10DaysFromPaymentStart;
            }
            else
            {
                Period10TotalFromPaymentStart = null;
            }
        }
        else
        {
            // Handle missing or invalid selected start date
            DaysDifferenceDisplay = "Invalid or missing dates";
            TotalCostDisplay = "Total cost cannot be calculated";
            Period10Days = 0;
            Period10Total = null;
            Period10DaysFromPaymentStart = 0;
            Period10TotalFromPaymentStart = null;
        }
        // Calculate Days Difference and Total Cost for Period 1
        if (selectedStartDate.HasValue)
        {
            // Calculate using selected start date
            var endDate = Payment1End2024FW;
            Period1Days = (endDate - selectedStartDate.Value).Days + 1; // Include start and end date
            CombinedDateRangeDisplay = $"{SelectedStartDateDisplay} - {endDate.ToString("MMMM dd, yyyy")} ({Period1Days} days)";
            DaysDifferenceDisplay = Period1Days.ToString();

            // Calculate total cost using daily rate
            if (DailyRate.HasValue)
            {
                Period1Total = DailyRate.Value * Period1Days;
                TotalCostDisplay = $"${Period1Total:F2}";
            }
            else
            {
                TotalCostDisplay = "Daily rate not specified";
                Period1Total = null;
            }

            // Calculate using Payment1Start2024FW
            Period1DaysFromPaymentStart = (Payment1End2024FW - Payment1Start2024FW).Days + 1; // Include start and end date
            if (DailyRate.HasValue)
            {
                Period1TotalFromPaymentStart = DailyRate.Value * Period1DaysFromPaymentStart;
            }
            else
            {
                Period1TotalFromPaymentStart = null;
            }
        }
        else
        {
            // Handle missing or invalid selected start date
            DaysDifferenceDisplay = "Invalid or missing dates";
            TotalCostDisplay = "Total cost cannot be calculated";
            Period1Days = 0;
            Period1Total = null;
            Period1DaysFromPaymentStart = 0;
            Period1TotalFromPaymentStart = null;
        }
        // Calculate Days Difference and Total Cost for Period 2
        if (selectedStartDate.HasValue)
        {
            var endDate = Payment2End2024FW;
            Period2Days = (endDate - selectedStartDate.Value).Days + 1;
            CombinedDateRangeDisplay = $"{SelectedStartDateDisplay} - {endDate.ToString("MMMM dd, yyyy")} ({Period2Days} days)";
            DaysDifferenceDisplay = Period2Days.ToString();

            if (DailyRate.HasValue)
            {
                Period2Total = DailyRate.Value * Period2Days;
                TotalCostDisplay = $"${Period2Total:F2}";
            }
            else
            {
                Period2Total = null;
            }

            Period2DaysFromPaymentStart = (Payment2End2024FW - Payment2Start2024FW).Days + 1;
            if (DailyRate.HasValue)
            {
                Period2TotalFromPaymentStart = DailyRate.Value * Period2DaysFromPaymentStart;
            }
            else
            {
                Period2TotalFromPaymentStart = null;
            }
        }

        // Calculate Days Difference and Total Cost for Period 3
        if (selectedStartDate.HasValue)
        {
            var endDate = Payment3End2024FW;
            Period3Days = (endDate - selectedStartDate.Value).Days + 1;
            CombinedDateRangeDisplay = $"{SelectedStartDateDisplay} - {endDate.ToString("MMMM dd, yyyy")} ({Period3Days} days)";
            DaysDifferenceDisplay = Period3Days.ToString();

            if (DailyRate.HasValue)
            {
                Period3Total = DailyRate.Value * Period3Days;
                TotalCostDisplay = $"${Period3Total:F2}";
            }
            else
            {
                Period3Total = null;
            }

            Period3DaysFromPaymentStart = (Payment3End2024FW - Payment3Start2024FW).Days + 1;
            if (DailyRate.HasValue)
            {
                Period3TotalFromPaymentStart = DailyRate.Value * Period3DaysFromPaymentStart;
            }
            else
            {
                Period3TotalFromPaymentStart = null;
            }
        }

        // Calculate Days Difference and Total Cost for Period 4
        if (selectedStartDate.HasValue)
        {
            var endDate = Payment4End2024FW;
            Period4Days = (endDate - selectedStartDate.Value).Days + 1;
            CombinedDateRangeDisplay = $"{SelectedStartDateDisplay} - {endDate.ToString("MMMM dd, yyyy")} ({Period4Days} days)";
            DaysDifferenceDisplay = Period4Days.ToString();

            if (DailyRate.HasValue)
            {
                Period4Total = DailyRate.Value * Period4Days;
                TotalCostDisplay = $"${Period4Total:F2}";
            }
            else
            {
                Period4Total = null;
            }

            Period4DaysFromPaymentStart = (Payment4End2024FW - Payment4Start2024FW).Days + 1;
            if (DailyRate.HasValue)
            {
                Period4TotalFromPaymentStart = DailyRate.Value * Period4DaysFromPaymentStart;
            }
            else
            {
                Period4TotalFromPaymentStart = null;
            }
        }

        // Calculate Days Difference and Total Cost for Period 5
        if (selectedStartDate.HasValue)
        {
            var endDate = Payment5End2024FW;
            Period5Days = (endDate - selectedStartDate.Value).Days + 1;
            CombinedDateRangeDisplay = $"{SelectedStartDateDisplay} - {endDate.ToString("MMMM dd, yyyy")} ({Period5Days} days)";
            DaysDifferenceDisplay = Period5Days.ToString();

            if (DailyRate.HasValue)
            {
                Period5Total = DailyRate.Value * Period5Days;
                TotalCostDisplay = $"${Period5Total:F2}";
            }
            else
            {
                Period5Total = null;
            }

            Period5DaysFromPaymentStart = (Payment5End2024FW - Payment5Start2024FW).Days + 1;
            if (DailyRate.HasValue)
            {
                Period5TotalFromPaymentStart = DailyRate.Value * Period5DaysFromPaymentStart;
            }
            else
            {
                Period5TotalFromPaymentStart = null;
            }
        }












        // Combine Dates into a Single String and Calculate Days Difference
        if (selectedStartDate.HasValue && agreementEndDate.HasValue)
        {
            var daysDifference = (agreementEndDate.Value - selectedStartDate.Value).Days;
            CombinedDateRangeDisplay = $"{SelectedStartDateDisplay} - {AgreementEndDateDisplay} ({daysDifference} days)";
            DaysDifferenceDisplay = daysDifference.ToString(); // Set the days difference
        }
        else
        {
            DaysDifferenceDisplay = "Invalid or missing dates"; // Handle missing or invalid dates
        }

        // Parse Area
        if (queryParams.TryGetValue("Area", out var areaValue) && int.TryParse(areaValue.ToString(), out var area))
        {
            Area = area;
            AreaDisplayName = area switch
            {
                1 => "Helaman Halls",
                2 => "Heritage Halls",
                3 => "Riviera",
                4 => "Wyview Park",
                _ => "Unknown Area"
            };
        }

        // Parse Agreement Period
        if (queryParams.TryGetValue("AgreementPeriod", out var agreementPeriodValue) && int.TryParse(agreementPeriodValue.ToString(), out var agreementPeriod))
        {
            AgreementPeriodDisplay = agreementPeriod switch
            {
                1 => "Spring 2024",
                2 => "Summer 2024",
                3 => "Fall Winter 2024",
                4 => "Winter 2025",
                5 => "Spring 2025",
                6 => "Summer 2025",
                7 => "Fall Winter 2025",
                8 => "Winter 2026",
                9 => "Spring 2026",
                10 => "Summer 2026",
                11 => "Fall Winter 2026",
                12 => "Winter 2027",
                _ => "Unknown Agreement Period"
            };
        }

        // Parse Room Type
        if (queryParams.TryGetValue("RoomType", out var roomTypeValue) && int.TryParse(roomTypeValue.ToString(), out var roomType))
        {
            RoomTypeDisplay = roomType switch
            {
                1 => "Rate 1",
                2 => "Rate 2",
                _ => roomType.ToString()
            };
        }

        // Determine the base IframeUrl
        IframeUrl = Area switch
        {
            1 or 2 => "https://byusign.na2.adobesign.com/public/esignWidget?wid=CBFCIBAA3AAABLblqZhB3CgMCc6i3412faQKEurYXc9N5vLkQEIcvpUSIL2F7Oz9Pazk4i0IiIV5YcP3bn00*&hosted=false",
            3 => "https://byusign.na2.adobesign.com/public/esignWidget?wid=CBFCIBAA3AAABLblqZhAQCbVuh79M68kYqamuClVSItha_HAl8uKyfcTamujsq8Y6j8ues4zSay52jMwfw2Y*&hosted=false",
            4 => "https://byusign.na2.adobesign.com/public/esignWidget?wid=CBFCIBAA3AAABLblqZhBn0uBgbNHLLKuRWU51P2NsZPYMroyrKEU-Wq_hJ7y7I3MbvKdPdQc4SSsx9jk7-ok*&hosted=false",
            _ => string.Empty
        };

        if (!string.IsNullOrEmpty(IframeUrl))
        {
            // Add parameters dynamically to the IFrame URL
            if (queryParams.TryGetValue("Name", out var nameValue))
            {
                Name = nameValue.ToString() ?? "Not specified";
                IframeUrl += $"#P1={Uri.EscapeDataString(Name)}";
            }

            if (queryParams.TryGetValue("NetID", out var netIDValue))
            {
                NetID = netIDValue.ToString() ?? "Not specified";
                IframeUrl += $"&P2={Uri.EscapeDataString(NetID)}";
            }

            if (queryParams.TryGetValue("BuildingId", out var buildingIdValue) && int.TryParse(buildingIdValue.ToString(), out var buildingId))
            {
                var building = Buildings.FirstOrDefault(b => b.Id == buildingId);
                BuildingName = building?.Name ?? "Not specified";
                IframeUrl += $"&P4={Uri.EscapeDataString(BuildingName)}";
            }

            if (queryParams.TryGetValue("BedspaceCode", out var bedspaceValue))
            {
                BedspaceCode = bedspaceValue.ToString() ?? "Not specified";
                BedspaceSubstring = BedspaceCode.Length >= 8 ? BedspaceCode.Substring(4, 4) : "Invalid";
                BedspaceSubstringEnd = BedspaceCode.Length >= 10 ? BedspaceCode.Substring(8, 2) : "Invalid";

                IframeUrl += $"&P5={Uri.EscapeDataString(BedspaceSubstring)}";
                IframeUrl += $"&P6={Uri.EscapeDataString(BedspaceSubstringEnd)}";
            }

            if (Area.HasValue)
            {
                IframeUrl += $"&P3={Uri.EscapeDataString(AreaDisplayName)}";
            }
            if (!string.IsNullOrEmpty(RoomTypeDisplay))
            {
                var calculatedRateType = RoomTypeDisplay; // Assuming RoomTypeDisplay contains the calculated string
                IframeUrl += $"&P7={Uri.EscapeDataString(calculatedRateType)}";
            }
            if (!string.IsNullOrEmpty(AgreementPeriodDisplay))
            {
                IframeUrl += $"&P8={Uri.EscapeDataString(AgreementPeriodDisplay)}";
            }
            if (!string.IsNullOrEmpty(CombinedDateRangeDisplay))
            {
                IframeUrl += $"&P9={Uri.EscapeDataString(CombinedDateRangeDisplay)}";
            }
            if (TotalBillableMoney.HasValue)
            {
                IframeUrl += $"&P10={Uri.EscapeDataString(TotalBillableMoney.Value.ToString("F2"))}";
            }
            else
            {
                IframeUrl += "&P10=NotAvailable";
            }
            // Determine the value for P11 based on selectedStartDate
            string P11Value = "0.00"; // Default value
            if (selectedStartDate.HasValue)
            {
                if (selectedStartDate.Value < Payment1Start2024FW)
                {
                    P11Value = Period1TotalFromPaymentStart.HasValue ? Period1TotalFromPaymentStart.Value.ToString("F2") : "0.00";
                }
                else if (selectedStartDate.Value >= Payment1Start2024FW && selectedStartDate.Value <= Payment1End2024FW)
                {
                    P11Value = Period1Total.HasValue ? Period1Total.Value.ToString("F2") : "0.00";
                }
            }
            IframeUrl += $"&P11={Uri.EscapeDataString(P11Value)}";

            string P13Value = "0.00"; // Default value
            if (selectedStartDate.HasValue)
            {
                if (selectedStartDate.Value < Payment2Start2024FW)
                {
                    P13Value = Period2TotalFromPaymentStart.HasValue ? Period2TotalFromPaymentStart.Value.ToString("F2") : "0.00";
                }
                else if (selectedStartDate.Value >= Payment2Start2024FW && selectedStartDate.Value <= Payment2End2024FW)
                {
                    P13Value = Period2Total.HasValue ? Period2Total.Value.ToString("F2") : "0.00";
                }
            }
            IframeUrl += $"&P12={Uri.EscapeDataString(payment1Range)}";
            IframeUrl += $"&P13={Uri.EscapeDataString(P13Value)}";

            string P15Value = "0.00"; // Default value
            if (selectedStartDate.HasValue)
            {
                if (selectedStartDate.Value < Payment3Start2024FW)
                {
                    P15Value = Period3TotalFromPaymentStart.HasValue ? Period3TotalFromPaymentStart.Value.ToString("F2") : "0.00";
                }
                else if (selectedStartDate.Value >= Payment3Start2024FW && selectedStartDate.Value <= Payment3End2024FW)
                {
                    P15Value = Period3Total.HasValue ? Period3Total.Value.ToString("F2") : "0.00";
                }
            }
            IframeUrl += $"&P14={Uri.EscapeDataString(payment2Range)}";
            IframeUrl += $"&P15={Uri.EscapeDataString(P15Value)}";

            string P17Value = "0.00"; // Default value
            if (selectedStartDate.HasValue)
            {
                if (selectedStartDate.Value < Payment4Start2024FW)
                {
                    P17Value = Period4TotalFromPaymentStart.HasValue ? Period4TotalFromPaymentStart.Value.ToString("F2") : "0.00";
                }
                else if (selectedStartDate.Value >= Payment4Start2024FW && selectedStartDate.Value <= Payment4End2024FW)
                {
                    P17Value = Period4Total.HasValue ? Period4Total.Value.ToString("F2") : "0.00";
                }
            }
            IframeUrl += $"&P16={Uri.EscapeDataString(payment3Range)}";
            IframeUrl += $"&P17={Uri.EscapeDataString(P17Value)}";

            string P19Value = "0.00"; // Default value
            if (selectedStartDate.HasValue)
            {
                if (selectedStartDate.Value < Payment5Start2024FW)
                {
                    P19Value = Period5TotalFromPaymentStart.HasValue ? Period5TotalFromPaymentStart.Value.ToString("F2") : "0.00";
                }
                else if (selectedStartDate.Value >= Payment5Start2024FW && selectedStartDate.Value <= Payment5End2024FW)
                {
                    P19Value = Period5Total.HasValue ? Period5Total.Value.ToString("F2") : "0.00";
                }
            }
            IframeUrl += $"&P18={Uri.EscapeDataString(payment4Range)}";
            IframeUrl += $"&P19={Uri.EscapeDataString(P19Value)}";

            string P21Value = "0.00"; // Default value
            if (selectedStartDate.HasValue)
            {
                if (selectedStartDate.Value < Payment6Start2024FW)
                {
                    P21Value = Period6TotalFromPaymentStart.HasValue ? Period6TotalFromPaymentStart.Value.ToString("F2") : "0.00";
                }
                else if (selectedStartDate.Value >= Payment6Start2024FW && selectedStartDate.Value <= Payment6End2024FW)
                {
                    P21Value = Period6Total.HasValue ? Period6Total.Value.ToString("F2") : "0.00";
                }
            }
            IframeUrl += $"&P20={Uri.EscapeDataString(payment5Range)}";
            IframeUrl += $"&P21={Uri.EscapeDataString(P21Value)}";


            string P23Value = "0.00"; // Default value

            if (selectedStartDate.HasValue)
            {
                if (selectedStartDate.Value < Payment7Start2024FW)
                {
                    // Show Period7TotalFromPaymentStart
                    P23Value = Period7TotalFromPaymentStart.HasValue ? Period7TotalFromPaymentStart.Value.ToString("F2") : "0.00";
                }
                else if (selectedStartDate.Value >= Payment7Start2024FW && selectedStartDate.Value <= Payment7End2024FW)
                {
                    // Show Period7Total
                    P23Value = Period7Total.HasValue ? Period7Total.Value.ToString("F2") : "0.00";
                }
                else
                {
                    // After Payment7End2024FW, show 0.00
                    P23Value = "0.00";
                }
            }
            IframeUrl += $"&P22={Uri.EscapeDataString(payment6Range)}";
            // Append P23 to the IframeUrl
            IframeUrl += $"&P23={Uri.EscapeDataString(P23Value)}";


            string P25Value = "0.00"; // Default value

            if (selectedStartDate.HasValue)
            {
                if (selectedStartDate.Value < Payment8Start2024FW)
                {
                    // Use Period8TotalFromPaymentStart when the selectedStartDate is before Payment8Start2024FW
                    P25Value = Period8TotalFromPaymentStart.HasValue ? Period8TotalFromPaymentStart.Value.ToString("F2") : "0.00";
                }
                else if (selectedStartDate.Value >= Payment8Start2024FW && selectedStartDate.Value <= Payment8End2024FW)
                {
                    // Use Period8Total when the selectedStartDate is within the range of Payment8Start2024FW and Payment8End2024FW
                    P25Value = Period8Total.HasValue ? Period8Total.Value.ToString("F2") : "0.00";
                }
            }
            IframeUrl += $"&P24={Uri.EscapeDataString(payment7Range)}";
            // Append P25 to the IframeUrl
            IframeUrl += $"&P25={Uri.EscapeDataString(P25Value)}";

            string P27Value = "0.00"; // Default value

            if (selectedStartDate.HasValue)
            {
                if (selectedStartDate.Value < Payment9Start2024FW)
                {
                    // Use Period9TotalFromPaymentStart when the selectedStartDate is before Payment9Start2024FW
                    P27Value = Period9TotalFromPaymentStart.HasValue ? Period9TotalFromPaymentStart.Value.ToString("F2") : "0.00";
                }
                else if (selectedStartDate.Value >= Payment9Start2024FW && selectedStartDate.Value <= Payment9End2024FW)
                {
                    // Use Period9Total when the selectedStartDate is within the range of Payment9Start2024FW and Payment9End2024FW
                    P27Value = Period9Total.HasValue ? Period9Total.Value.ToString("F2") : "0.00";
                }
            }
            IframeUrl += $"&P26={Uri.EscapeDataString(payment8Range)}";
            // Append P27 to the IframeUrl
            IframeUrl += $"&P27={Uri.EscapeDataString(P27Value)}";
            string P29Value = "0.00"; // Default value

            if (selectedStartDate.HasValue)
            {
                if (selectedStartDate.Value < Payment10Start2024FW)
                {
                    // Use Period10TotalFromPaymentStart when the selectedStartDate is before Payment10Start2024FW
                    P29Value = Period10TotalFromPaymentStart.HasValue ? Period10TotalFromPaymentStart.Value.ToString("F2") : "0.00";
                }
                else if (selectedStartDate.Value >= Payment10Start2024FW && selectedStartDate.Value <= Payment10End2024FW)
                {
                    // Use Period10Total when the selectedStartDate is within the range of Payment10Start2024FW and Payment10End2024FW
                    P29Value = Period10Total.HasValue ? Period10Total.Value.ToString("F2") : "0.00";
                }
            }
            IframeUrl += $"&P28={Uri.EscapeDataString(payment9Range)}";
            // Append P29 to the IframeUrl
            IframeUrl += $"&P29={Uri.EscapeDataString(P29Value)}";
            IframeUrl += $"&P30={Uri.EscapeDataString(payment10Range)}";

        }
    }

    private class Building
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }

    private List<Building> Buildings = new()
    {
        new Building { Id = 1, Name = "Hinckley" },
        new Building { Id = 2, Name = "Chipman" },
        new Building { Id = 3, Name = "David John" },
        new Building { Id = 4, Name = "Taylor" },
        new Building { Id = 5, Name = "Stover" },
        new Building { Id = 6, Name = "Budge" },
        new Building { Id = 7, Name = "Merrill" },
        new Building { Id = 8, Name = "May" },
        new Building { Id = 9, Name = "Building 9" },
        new Building { Id = 10, Name = "HR 02" },
        new Building { Id = 11, Name = "HR 03" },
        new Building { Id = 12, Name = "HR 04" },
        new Building { Id = 13, Name = "HR 05" },
        new Building { Id = 14, Name = "HR 06" },
        new Building { Id = 15, Name = "HR 07" },
        new Building { Id = 16, Name = "HR 08" },
        new Building { Id = 17, Name = "HR 09" },
        new Building { Id = 18, Name = "HR 10" },
        new Building { Id = 19, Name = "HR 11" },
        new Building { Id = 20, Name = "HR 12" },
        new Building { Id = 21, Name = "HR 13" },
        new Building { Id = 22, Name = "HR 14" },
        new Building { Id = 23, Name = "HR 15" },
        new Building { Id = 24, Name = "HR 16" },
        new Building { Id = 25, Name = "RI A" },
        new Building { Id = 26, Name = "RI B" },
        new Building { Id = 27, Name = "RI C" },
        new Building { Id = 28, Name = "RI D" },
        new Building { Id = 29, Name = "RI E" },
        new Building { Id = 30, Name = "RI F" },
        new Building { Id = 31, Name = "RI G" },
        new Building { Id = 32, Name = "RI H" },
        new Building { Id = 33, Name = "RI I" },
        new Building { Id = 34, Name = "RI J" },
        new Building { Id = 35, Name = "RI K" },
        new Building { Id = 36, Name = "RI L" },
        new Building { Id = 37, Name = "RI O" },
        new Building { Id = 38, Name = "LI A" },
        new Building { Id = 39, Name = "LI B" },
        new Building { Id = 40, Name = "LI C" },
        new Building { Id = 41, Name = "LI D" },
        new Building { Id = 42, Name = "LI E" },
        new Building { Id = 43, Name = "WP 1" },
        new Building { Id = 44, Name = "WP 2" },
        new Building { Id = 45, Name = "WP 3" },
        new Building { Id = 46, Name = "WP 4" },
        new Building { Id = 47, Name = "WP 5" },
        new Building { Id = 48, Name = "WP 6" },
        new Building { Id = 49, Name = "WP 7" },
        new Building { Id = 50, Name = "WP 8" },
        new Building { Id = 51, Name = "WP 9" },
        new Building { Id = 52, Name = "WP 10" },
        new Building { Id = 53, Name = "WP 11" }
    };
    private void NavigateToMealPlanAgreement()
    {
        // Get the current URI and its query parameters
        var uri = new Uri(NavigationManager.Uri);
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        // Construct a new query string from the existing parameters
        var newQueryString = string.Join("&", queryParams.Select(kvp =>
        {
            var value = kvp.Value.ToString(); // Convert StringValues to string
            return $"{kvp.Key}={Uri.EscapeDataString(value ?? string.Empty)}";
        }));

        // Navigate to the next page with the query string
        NavigationManager.NavigateTo($"/stepNineSignMealPlanAgreement?{newQueryString}");
    }


    // private void NavigateToMealPlanAgreement()
    // {
    //     // Get the current URI and its query parameters
    //     var uri = new Uri(NavigationManager.Uri);
    //     var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

    //     // Construct a new query string from the existing parameters
    //     var newQueryString = string.Join("&", queryParams.Select(kvp => $"{kvp.Key}={Uri.EscapeDataString(kvp.Value)}"));

    //     // Navigate to the next page with the query string
    //     NavigationManager.NavigateTo($"/stepNineSignMealPlanAgreement?{newQueryString}");
    // }


    // private void NavigateToMealPlanAgreement()
    // {
    //     NavigationManager.NavigateTo("/stepNineSignMealPlanAgreement");
    // }
}
