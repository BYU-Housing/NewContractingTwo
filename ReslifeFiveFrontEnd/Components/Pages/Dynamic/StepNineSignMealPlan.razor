@page "/stepNineSignMealPlanAgreement"
@inject NavigationManager NavigationManager
@inject IGenService GenService

<h3>Step Nine: Sign Meal Plan Agreement</h3>

<h4>Sign Your Agreement</h4>
@if (!string.IsNullOrEmpty(NetID))
{
    <div>
        <iframe src="https://byusign.na2.adobesign.com/public/esignWidget?wid=CBFCIBAA3AAABLblqZhDo1XW7OnanDKGOVDsvxssCBPRXL5D9FFQ6fIXQtyFZ1yaZTFOtNuBr-t6IGklXdqU*&hosted=false#P1=@NetID
&P2=@SelectedMealPlanDisplay&P3=Test&P4=@SelectedStartDateDisplay&P5=@AgreementEndDateDisplay&P6=Test&P7=@CalculateTotalCost(Period1Start, Period1End)"
                width="100%"
                height="500px"
                frameborder="0"
                style="border: 0; overflow: hidden;">
        </iframe>
    </div>
}
else
{
    <p>Please provide a valid NetID to proceed.</p>
}





<div>
    <h4>Selected Meal Plan:</h4>
    <p>@SelectedMealPlanDisplay</p>
    <h4>Daily Rate:</h4>
    <p>@SelectedMealPlanRate</p>
    <h4>NetID:</h4>
    <p>@NetID</p>
    <h4>Agreement Period:</h4>
    <p>@AgreementPeriodDisplay</p>
    <h4>Selected Start Date:</h4>
    <p>@SelectedStartDateDisplay</p>
    <h4>Agreement End Date:</h4>
    <p>@AgreementEndDateDisplay</p>
</div>

<h4>Billing Periods</h4>
<table class="table table-striped">
    <thead>
        <tr>
            <th>Start Date</th>
            <th>End Date</th>
            <th>Number of Days</th>
            <th>Total Days After Selected Start Date</th>
            <th>Total Cost</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>@Period1Start.ToString("MM/dd/yyyy")</td>
            <td>@Period1End.ToString("MM/dd/yyyy")</td>
            <td>@(Period1End - Period1Start).Days</td>
            <td>@CalculateDaysAfterSelectedStartDate(Period1Start, Period1End)</td>
            <td>@CalculateTotalCost(Period1Start, Period1End)</td>
        </tr>
        <tr>
            <td>@Period2Start.ToString("MM/dd/yyyy")</td>
            <td>@Period2End.ToString("MM/dd/yyyy")</td>
            <td>@(Period2End - Period2Start).Days</td>
            <td>@CalculateDaysAfterSelectedStartDate(Period2Start, Period2End)</td>
            <td>@CalculateTotalCost(Period2Start, Period2End)</td>
        </tr>
        <tr>
            <td>@Period3Start.ToString("MM/dd/yyyy")</td>
            <td>@Period3End.ToString("MM/dd/yyyy")</td>
            <td>@(Period3End - Period3Start).Days</td>
            <td>@CalculateDaysAfterSelectedStartDate(Period3Start, Period3End)</td>
            <td>@CalculateTotalCost(Period3Start, Period3End)</td>
        </tr>
        <tr>
            <td>@Period4Start.ToString("MM/dd/yyyy")</td>
            <td>@Period4End.ToString("MM/dd/yyyy")</td>
            <td>@(Period4End - Period4Start).Days</td>
            <td>@CalculateDaysAfterSelectedStartDate(Period4Start, Period4End)</td>
            <td>@CalculateTotalCost(Period4Start, Period4End)</td>
        </tr>
        <tr>
            <td>@Period5Start.ToString("MM/dd/yyyy")</td>
            <td>@Period5End.ToString("MM/dd/yyyy")</td>
            <td>@(Period5End - Period5Start).Days</td>
            <td>@CalculateDaysAfterSelectedStartDate(Period5Start, Period5End)</td>
            <td>@CalculateTotalCost(Period5Start, Period5End)</td>
        </tr>
        <tr>
            <td>@UnbillStart.ToString("MM/dd/yyyy")</td>
            <td>@UnbillEnd.ToString("MM/dd/yyyy")</td>
            <td>@(UnbillEnd - UnbillStart).Days</td>
            <td>@CalculateDaysAfterSelectedStartDate(UnbillStart, UnbillEnd)</td>
            <td>@CalculateTotalCost(UnbillStart, UnbillEnd)</td>
        </tr>
        <tr>
            <td>@Period6Start.ToString("MM/dd/yyyy")</td>
            <td>@Period6End.ToString("MM/dd/yyyy")</td>
            <td>@(Period6End - Period6Start).Days</td>
            <td>@CalculateDaysAfterSelectedStartDate(Period6Start, Period6End)</td>
            <td>@CalculateTotalCost(Period6Start, Period6End)</td>
        </tr>
        <tr>
            <td>@Period7Start.ToString("MM/dd/yyyy")</td>
            <td>@Period7End.ToString("MM/dd/yyyy")</td>
            <td>@(Period7End - Period7Start).Days</td>
            <td>@CalculateDaysAfterSelectedStartDate(Period7Start, Period7End)</td>
            <td>@CalculateTotalCost(Period7Start, Period7End)</td>
        </tr>
        <tr>
            <td>@Period8Start.ToString("MM/dd/yyyy")</td>
            <td>@Period8End.ToString("MM/dd/yyyy")</td>
            <td>@(Period8End - Period8Start).Days</td>
            <td>@CalculateDaysAfterSelectedStartDate(Period8Start, Period8End)</td>
            <td>@CalculateTotalCost(Period8Start, Period8End)</td>
        </tr>
        <tr>
            <td>@Period9Start.ToString("MM/dd/yyyy")</td>
            <td>@Period9End.ToString("MM/dd/yyyy")</td>
            <td>@(Period9End - Period9Start).Days</td>
            <td>@CalculateDaysAfterSelectedStartDate(Period9Start, Period9End)</td>
            <td>@CalculateTotalCost(Period9Start, Period9End)</td>
        </tr>
        <tr>
            <td>@Period10Start.ToString("MM/dd/yyyy")</td>
            <td>@Period10End.ToString("MM/dd/yyyy")</td>
            <td>@(Period10End - Period10Start).Days</td>
            <td>@CalculateDaysAfterSelectedStartDate(Period10Start, Period10End)</td>
            <td>@CalculateTotalCost(Period10Start, Period10End)</td>
        </tr>
    </tbody>
</table>

@code {
    private int? SelectedMealPlan; // Nullable to handle missing parameter
    private string SelectedMealPlanDisplay = "Not specified";
    private decimal SelectedMealPlanRate = 0.00m; // Default rate if no meal plan is selected
    private string NetID = "Not specified"; // Default value for NetID
    private string AgreementPeriodDisplay = "Not specified"; // Default value for AgreementPeriod
    private string SelectedStartDateDisplay = "Not specified"; // Default value for SelectedStartDate
    private string AgreementEndDateDisplay = "Not specified"; // Default value for AgreementEndDate

    private DateTime? SelectedStartDate; // Nullable to handle SelectedStartDate parameter


    // Billing periods
    private DateTime Period1Start = new DateTime(2024, 8, 28);
    private DateTime Period1End = new DateTime(2024, 9, 20);
    private DateTime Period2Start = new DateTime(2024, 9, 20);
    private DateTime Period2End = new DateTime(2024, 10, 13);
    private DateTime Period3Start = new DateTime(2024, 10, 13);
    private DateTime Period3End = new DateTime(2024, 11, 5);
    private DateTime Period4Start = new DateTime(2024, 11, 5);
    private DateTime Period4End = new DateTime(2024, 11, 28);
    private DateTime Period5Start = new DateTime(2024, 11, 28);
    private DateTime Period5End = new DateTime(2024, 12, 19);
    private DateTime UnbillStart = new DateTime(2024, 12, 19);
    private DateTime UnbillEnd = new DateTime(2025, 1, 6);
    private DateTime Period6Start = new DateTime(2025, 1, 6);
    private DateTime Period6End = new DateTime(2025, 1, 28);
    private DateTime Period7Start = new DateTime(2025, 1, 28);
    private DateTime Period7End = new DateTime(2025, 2, 19);
    private DateTime Period8Start = new DateTime(2025, 2, 19);
    private DateTime Period8End = new DateTime(2025, 3, 13);
    private DateTime Period9Start = new DateTime(2025, 3, 13);
    private DateTime Period9End = new DateTime(2025, 4, 4);
    private DateTime Period10Start = new DateTime(2025, 4, 4);
    private DateTime Period10End = new DateTime(2025, 4, 26);

    // Dictionary to map integers to meal plan names and their corresponding daily rates
    private readonly Dictionary<int, (string Name, decimal Rate)> MealPlans = new()
    {
        { 1, ("19+", 10.00m) },
        { 2, ("Dining Plus", 11.00m) },
        { 3, ("EZ Dining 100", 12.00m) },
        { 4, ("EZ Dining 150", 13.00m) },
        { 5, ("EZ Dining 200", 14.00m) },
        { 6, ("Open Door", 15.00m) },
        { 7, ("True Blue Dining 500", 16.00m) },
        { 8, ("True Blue Dining 500 Weekly", 17.00m) },
        { 9, ("True Blue Dining 800", 18.00m) },
        { 10, ("True Blue Dining 800 Weekly", 19.00m) },
        { 11, ("No Meal Plan", 20.00m) }
    };

    protected override void OnInitialized()
    {
        // Parse the current URL to extract parameters
        var uri = new Uri(NavigationManager.Uri);
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        // Extract SelectedMealPlan parameter
        if (queryParams.TryGetValue("SelectedMealPlan", out var mealPlanValue) &&
            int.TryParse(mealPlanValue, out var parsedMealPlan))
        {
            SelectedMealPlan = parsedMealPlan;

            // Lookup the meal plan name and rate in the dictionary
            if (MealPlans.TryGetValue(parsedMealPlan, out var mealPlanInfo))
            {
                SelectedMealPlanDisplay = mealPlanInfo.Name;
                SelectedMealPlanRate = mealPlanInfo.Rate;
            }
            else
            {
                SelectedMealPlanDisplay = "Unknown Meal Plan";
                SelectedMealPlanRate = 0.00m;
            }
        }

        // Extract NetID parameter
        if (queryParams.TryGetValue("NetID", out var netIDValue))
        {
            NetID = netIDValue!;
        }

        // Extract AgreementPeriod parameter
        if (queryParams.TryGetValue("AgreementPeriod", out var agreementPeriodValue))
        {
            AgreementPeriodDisplay = agreementPeriodValue!;
        }

        // // Extract SelectedStartDate parameter
        // if (queryParams.TryGetValue("SelectedStartDate", out var startDateValue))
        // {
        //     SelectedStartDateDisplay = startDateValue!;
        // }
        // Extract SelectedStartDate parameter
        if (queryParams.TryGetValue("SelectedStartDate", out var startDateValue) &&
            DateTime.TryParse(startDateValue, out var parsedStartDate))
        {
            SelectedStartDate = parsedStartDate;
            SelectedStartDateDisplay = parsedStartDate.ToString("MM/dd/yyyy");
        }

        // Extract AgreementEndDate parameter
        if (queryParams.TryGetValue("AgreementEndDate", out var endDateValue))
        {
            AgreementEndDateDisplay = endDateValue!;
        }
    }
    private int CalculateDaysAfterSelectedStartDate(DateTime start, DateTime end)
    {
        if (SelectedStartDate.HasValue)
        {
            if (start >= SelectedStartDate.Value)
            {
                return (end - start).Days + 1; // Include start date
            }
            else if (end >= SelectedStartDate.Value)
            {
                return (end - SelectedStartDate.Value).Days + 1; // Include SelectedStartDate
            }
        }
        return 0; // No overlap or no SelectedStartDate
    }


    private decimal CalculateTotalCost(DateTime start, DateTime end)
    {
        if (SelectedMealPlanRate > 0)
        {
            int daysAfter = CalculateDaysAfterSelectedStartDate(start, end);
            return daysAfter * SelectedMealPlanRate;
        }
        return 0m; // Return 0 if no rate or days are applicable
    }

}
