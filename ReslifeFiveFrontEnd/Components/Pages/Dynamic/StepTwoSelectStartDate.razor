@page "/selectStartDate"
@inject IGenService GenService
@inject NavigationManager NavigationManager

<h1 style="text-align: center;">Contracting Portal</h1>
<!-- Progress Bar -->
<div class="progress mb-4">
    <div class="progress-bar"
         role="progressbar"
         style="width: 20%; background-color: #007bff;"
         aria-valuenow="2"
         aria-valuemin="0"
         aria-valuemax="10">
        Step 2 of 10
    </div>
</div>
<h5>Step 2 - Select your desired contract Start Date.</h5>
<p>
    If this is a future agreement, you will only be allowed to pick the first day of the contract, however if the agreement period has already started such as in the case of a replacement or room swap, you will be allowed to select a date up to 7 days in the future.
    Please note that this date represents the day that you will start paying for housing, and will not be adjusted for later check-ins (Austin).
</p>

@if (AgreementStartDate.HasValue)
{
    if (AgreementStartDate.Value < DateTime.Now)
    {
        <div class="d-flex flex-column align-items-center mt-5">
            @for (var i = 0; i < 7; i++)
            {
                var date = DateTime.Now.AddDays(i);
                <button class="btn btn-primary my-2 w-50" @onclick="() => NavigateToStepThree(date)">
                    @date.ToString("yyyy-MM-dd")
                </button>
            }
        </div>
    }
    else
    {
        <div class="d-flex flex-column align-items-center mt-5">
            <button class="btn btn-primary w-50" @onclick="() => NavigateToStepThree(AgreementStartDate.Value)">
                @AgreementStartDate.Value.ToString("yyyy-MM-dd")
            </button>
        </div>
    }
}
else
{
    <div class="card text-center mt-5">
        <div class="card-body">
            <h5>Missing Date</h5>
            <p>No Agreement Start Date found in the URL.</p>
        </div>
    </div>
}

@code {
    private Dictionary<string, string?> UrlParameters = new Dictionary<string, string?>();
    private DateTime? AgreementStartDate;

    protected override void OnInitialized()
    {
        // Parse the query string from the URL
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        foreach (string key in query.Keys)
        {
            if (!string.IsNullOrEmpty(key))
            {
                UrlParameters[key] = query[key];

                // Parse AgreementStartDate if present
                if (key == "AgreementStartDate" && DateTime.TryParse(query[key], out var startDate))
                {
                    AgreementStartDate = startDate;
                }
            }
        }
    }

    private void NavigateToStepThree(DateTime selectedDate)
    {
        // Convert selectedDate to ISO 8601 format matching other timestamps
        var formattedTimestamp = selectedDate.ToString("yyyy-MM-ddTHH:mm:ss");

        // Add SelectedStartDate as a timestamp to the existing URL parameters
        UrlParameters["SelectedStartDate"] = formattedTimestamp;

        // Construct query string from all parameters
        var queryString = string.Join("&", UrlParameters.Select(kvp => $"{kvp.Key}={Uri.EscapeDataString(kvp.Value ?? string.Empty)}"));

        // Navigate to the next page with all parameters
        NavigationManager.NavigateTo($"/stepThreeSelectArea?{queryString}");
    }
}
