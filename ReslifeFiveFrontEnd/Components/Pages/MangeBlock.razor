@page "/manageBlock"
@using Microsoft.EntityFrameworkCore
@inject IGenService GenService

<h3>Manage Block</h3>

<!-- Form to Create a New Block -->
<div class="mb-4">
    <form @onsubmit="HandleSubmit">
        <div class="mb-3">
            <label for="blockName" class="form-label">Block Name</label>
            <input id="blockName" type="text" class="form-control" @bind="NewBlock.Name" required />
        </div>
        <div class="form-check mb-3">
            <input id="blockActive" type="checkbox" class="form-check-input" @bind="NewBlock.Active" />
            <label for="blockActive" class="form-check-label">Active</label>
        </div>
        <button type="submit" class="btn btn-primary">Create Block</button>
    </form>
</div>

<!-- Table to Display Blocks -->
<table class="table table-striped">
    <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Active</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var block in Blocks)
        {
            <tr>
                <td>@block.Id</td>
                <td>
                    @if (EditingBlock?.Id == block.Id)
                    {
                        <input type="text" class="form-control" @bind="EditingBlock.Name" />
                    }
                    else
                    {
                        @block.Name
                    }
                </td>
                <td>
                    @if (EditingBlock?.Id == block.Id)
                    {
                        <input type="checkbox" class="form-check-input" @bind="EditingBlock.Active" />
                    }
                    else
                    {
                        @(block.Active ? "Yes" : "No")
                    }
                </td>
                <td>
                    @if (EditingBlock?.Id == block.Id)
                    {
                        <button class="btn btn-success btn-sm" @onclick="() => SaveEdit(block.Id)">Save</button>
                        <button class="btn btn-secondary btn-sm" @onclick="CancelEdit">Cancel</button>
                    }
                    else
                    {
                        <button class="btn btn-primary btn-sm" @onclick="() => StartEdit(block)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteBlock(block.Id)">Delete</button>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Block> Blocks = new();
    private Block NewBlock = new();
    private Block? EditingBlock = null;

    protected override async Task OnInitializedAsync()
    {
        // Fetch all Block data from the database, sorted by Id descending
        Blocks = await GenService.GetModel<Block>()
            .OrderByDescending(b => b.Id)
            .ToListAsync();
    }

    private async Task HandleSubmit()
    {
        // Add the new block to the database
        GenService.Add(NewBlock);
        await GenService.SaveChangesAsync();

        // Reset the form and refresh the block list in sorted order
        NewBlock = new Block();
        Blocks = await GenService.GetModel<Block>()
            .OrderByDescending(b => b.Id)
            .ToListAsync();
    }

    private void StartEdit(Block block)
    {
        // Start editing the selected block
        EditingBlock = new Block
            {
                Id = block.Id,
                Name = block.Name,
                Active = block.Active
            };
    }

    private void CancelEdit()
    {
        // Cancel editing
        EditingBlock = null;
    }

    private async Task SaveEdit(int blockId)
    {
        if (EditingBlock != null)
        {
            // Find the original block in the database and update it
            var blockToUpdate = Blocks.FirstOrDefault(b => b.Id == blockId);
            if (blockToUpdate != null)
            {
                blockToUpdate.Name = EditingBlock.Name;
                blockToUpdate.Active = EditingBlock.Active;

                GenService.Update(blockToUpdate);
                await GenService.SaveChangesAsync();

                // Refresh the block list in sorted order and exit edit mode
                Blocks = await GenService.GetModel<Block>()
                    .OrderByDescending(b => b.Id)
                    .ToListAsync();
                EditingBlock = null;
            }
        }
    }

    private async Task DeleteBlock(int blockId)
    {
        // Find the block to delete
        var blockToDelete = Blocks.FirstOrDefault(b => b.Id == blockId);
        if (blockToDelete != null)
        {
            // Remove the block from the database
            GenService.Remove(blockToDelete);
            await GenService.SaveChangesAsync();

            // Refresh the block list in sorted order
            Blocks = await GenService.GetModel<Block>()
                .OrderByDescending(b => b.Id)
                .ToListAsync();
        }
    }
}

