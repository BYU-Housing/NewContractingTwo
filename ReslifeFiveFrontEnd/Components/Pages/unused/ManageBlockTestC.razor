@page "/manageBlockTestC"
@inject IGenService GenService

<h3>ManageBlockTest</h3>
<p>This is the Test Version of the Block Manager.</p>


<Button @onclick="AddRow">Add New BlockTestC</Button>

<div class="container-fluid vh-100">
    <Grid TItem="BlockTestC"
          Data="AllObjects"
          Class="w-100 table table-hover table-bordered table-striped"
          AllowPaging="true"
          PageSize="10"
          Responsive="true">
        <GridColumn TItem="BlockTestC" HeaderText="Id">
            @context.Id
        </GridColumn>
        <GridColumn TItem="BlockTestC" HeaderText="Name">
            @context.Name
        </GridColumn>
        <GridColumn TItem="BlockTestC" HeaderText="Start Date">
            @(context.StartDate.ToString() ?? "Not Set")
        </GridColumn>

        @*  End Date Time Stamp *@
        <GridColumn TItem="BlockTestC" HeaderText="End Date">
            @(context.EndDate.ToString() ?? "Not Set")
        </GridColumn>
        @*  End Date Time Stamp *@

        @* RoomNumber *@
        <GridColumn TItem="BlockTestC" HeaderText="Room Number">
            @context.RoomNumber
        </GridColumn>
        @* RoomNumber *@

        @* Dropdown *@
        <GridColumn TItem="BlockTestC" HeaderText="OccupantType">
            @GetOccupantType(context.OccupantType)
        </GridColumn>
        @* Dropdown *@

        @* BedspaceCode *@
        <GridColumn TItem="BlockTestC" HeaderText="BedspaceCode">
            @context.BedspaceCode
        </GridColumn>
        @* BedspaceCode *@

        <GridColumn TItem="BlockTestC" HeaderText="Action">
            <Button @onclick="() => EditObject(context)">
                <Icon Name="IconName.Pencil" />
            </Button>
            <Button @onclick="() => DeleteObject(context)">
                <Icon Name="IconName.Trash3" />
            </Button>
        </GridColumn>
    </Grid>
</div>

<Modal @ref="ObjectAdditionModal" Title="Add/Edit BlockTestC">
    <BodyTemplate>
        <div>
            @if (SelectedObject.Id != 0)
            {
                <p>
                    BlockTestC ID: @SelectedObject.Id
                </p>
            }

            <label for="nameInput">Name:</label>
            <input type="text" @bind="SelectedObject.Name" />
            <br />
            @* Number Input *@
            <label for="roomNumberInput" class="my-3">Room Number:</label>
            <InputNumber @bind-Value="SelectedObject.RoomNumber" class="form-control mt-3" placeholder="Room Number" />
            @* Number Input *@

            @*  Occupant Type *@
            <label for="occupantTypeSelect" class="mt-3">Occupant Type:</label>
            <select class="form-control mt-3" @bind="SelectedObject.OccupantType">
                @* <option value="0">None</option> *@
                <option value="1">Single</option>
                <option value="2">Family</option>
                <option value="3">Conference</option>
                <option value="4">Closed For Maintenance</option>
            </select>
            @*  Occupant Type *@

            @* BedspaceCode Input *@
            <label for="bedspaceCodeInput" class="my-3">Bedspace Code:</label>
            <InputNumber @bind-Value="SelectedObject.BedspaceCode" class="form-control mt-3" placeholder="Bedspace Code" />
            @* BedspaceCode Input *@

            <label for="startDateInput" class="mt-3">Start Date:</label>
            <DateInput TValue="DateOnly" @bind-Value="StartDate" />
            <TimeInput TValue="TimeOnly" @bind-Value="StartTime" />
            <br />
            <label for="endDateInput" class="mt-3">End Date:</label>
            <DateInput TValue="DateOnly" @bind-Value="EndDate" />
            <TimeInput TValue="TimeOnly" @bind-Value="EndTime" />

        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
        <Button Color="ButtonColor.Primary" @onclick="UpsertObject">Save changes</Button>
    </FooterTemplate>
</Modal>

@code {
    private List<BlockTestC> AllObjects = [];
    private Modal ObjectAdditionModal = default!;
    private BlockTestC SelectedObject = new BlockTestC();

    // Start Date
    private DateOnly StartDate = DateOnly.FromDateTime(DateTime.Now);
    private TimeOnly StartTime = TimeOnly.FromDateTime(DateTime.Now);
    private DateOnly EndDate = DateOnly.FromDateTime(DateTime.Now);
    private TimeOnly EndTime = TimeOnly.FromDateTime(DateTime.Now);


    protected override void OnInitialized()
    {
        AllObjects = GenService.GetModel<BlockTestC>().ToList();
    }

    private void UpdateObjects()
    {
        AllObjects = GenService.GetModel<BlockTestC>().ToList();
    }

    private async Task AddRow()
    {
        SelectedObject = new BlockTestC
            {
                OccupantType = 0
            };
        await OnShowModalClick();
    }

    private async Task OnShowModalClick()
    {
        await ObjectAdditionModal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await ObjectAdditionModal.HideAsync();
    }

    private async Task UpsertObject()
    {
        //SelectedObject.Start = selectedDateTime;
        SelectedObject.StartDate = DateTime.SpecifyKind(StartDate.ToDateTime(StartTime), DateTimeKind.Utc);
        SelectedObject.EndDate = DateTime.SpecifyKind(EndDate.ToDateTime(EndTime), DateTimeKind.Utc);
        GenService.Upsert<BlockTestC>(SelectedObject);
        await OnHideModalClick();
        UpdateObjects();
    }

    private async Task EditObject(BlockTestC varObject)
    {
        SelectedObject = varObject;
        await OnShowModalClick();
    }

    private void DeleteObject(BlockTestC varObject)
    {
        GenService.Remove<BlockTestC>(varObject);
        GenService.SaveChanges();
        UpdateObjects();
    }

    private string GetOccupantType(int? occupantType)
    {
        return occupantType switch
        {
            // 0 => "None",
            1 => "Single",
            2 => "Family",
            3 => "Conference",
            4 => "Closed For Maintenance",
            _ => "Unknown"
        };
    }






}
