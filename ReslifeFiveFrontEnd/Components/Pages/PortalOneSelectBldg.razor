@page "/portalOneSelectBuilding"
@inject NavigationManager NavigationManager
@inject IGenService GenService
@using Microsoft.AspNetCore.Components

<h3>Select A Building</h3>
<p>Selected Area: @Area</p>

<div class="progress">
    <div class="progress-bar"
         role="progressbar"
         style="width: 20%;"
         aria-valuenow="20"
         aria-valuemin="0"
         aria-valuemax="100">
        Step 2 of 10
    </div>
</div>

@if (IsLoading)
{
    <div class="progress">
        <div class="progress-bar progress-bar-striped progress-bar-animated" style="width: 100%;">
            Loading...
        </div>
    </div>
}
else if (Area.HasValue)
{
    <div class="d-flex flex-column gap-3">
        @foreach (var block in BuildingBlocks)
        {
            @RenderBlock(block.Name, block.ImageUrl, block.Count)
        }
    </div>
}
else
{
    <p>Area not specified. Please select an area.</p>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public int? Area { get; set; } // Allow nullable in case the parameter is not provided

    private bool IsLoading = true;

    private List<BuildingBlock> BuildingBlocks = new();

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        // Fetch building data based on the Area
        await LoadBuildingBlocksAsync();

        IsLoading = false;
    }

    private async Task LoadBuildingBlocksAsync()
    {
        if (Area == 1)
        {
            BuildingBlocks = new()
        {
            new BuildingBlock("Hinckley", "https://example.com/hinckley.jpg", await GetBuildingCount(6)),
            new BuildingBlock("Chipman", "https://example.com/chipman.jpg", await GetBuildingCount(7)),
            new BuildingBlock("David John", "https://example.com/davidjohn.jpg", await GetBuildingCount(8)),
            new BuildingBlock("Taylor", "https://example.com/taylor.jpg", await GetBuildingCount(9)),
            new BuildingBlock("Stover", "https://example.com/stover.jpg", await GetBuildingCount(10)),
            new BuildingBlock("Budge", "https://example.com/budge.jpg", await GetBuildingCount(11)),
            new BuildingBlock("Merrill", "https://example.com/merrill.jpg", await GetBuildingCount(12)),
            new BuildingBlock("May", "https://example.com/may.jpg", await GetBuildingCount(13)),
            new BuildingBlock("Building 9", "https://example.com/building9.jpg", await GetBuildingCount(14))
        };
        }
        else if (Area == 2)
        {
            BuildingBlocks = Enumerable.Range(2, 15)
                .Select(i => new BuildingBlock($"Building {i}", $"https://example.com/building{i}.jpg", i * 10))
                .ToList();
        }
        else if (Area == 3)
        {
            BuildingBlocks = Enumerable.Range('A', 12)
                .Select(i => new BuildingBlock(((char)i).ToString(), $"https://example.com/building{(char)i}.jpg", i - 64))
                .ToList();
        }
        else if (Area == 4)
        {
            BuildingBlocks = Enumerable.Range(1, 11)
                .Select(i => new BuildingBlock($"WP Building {i}", $"https://example.com/wpbuilding{i}.jpg", i * 5))
                .ToList();
        }
    }


    private async Task<int> GetBuildingCount(int buildingId)
    {
        return await GenService.CountAsync<BlockTest>(bt =>
            bt.AgreementPeriod == 3 &&
            bt.Active == true &&
            bt.OccupantType == 1 &&
            bt.Area == Area &&
            bt.Sex == 1 &&
            bt.Community == 1 &&
            (bt.ContractingReqMet == 1 || bt.ContractingReqMet == 3) &&
            bt.Building == buildingId);
    }

    private RenderFragment RenderBlock(string name, string imageUrl, int count) => builder =>
    {
        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "class", "d-flex align-items-center border rounded p-3 bg-light shadow-sm");

        // Image Section
        builder.OpenElement(2, "img");
        builder.AddAttribute(3, "src", imageUrl);
        builder.AddAttribute(4, "alt", name);
        builder.AddAttribute(5, "class", "img-thumbnail me-3");
        builder.AddAttribute(6, "style", "width: 100px; height: 100px; object-fit: cover;");
        builder.CloseElement();

        // Middle Section (Description)
        builder.OpenElement(7, "div");
        builder.AddAttribute(8, "class", "flex-grow-1");
        builder.OpenElement(9, "h5");
        builder.AddContent(10, name);
        builder.CloseElement();
        builder.OpenElement(11, "p");
        builder.AddContent(12, "Lorem ipsum dolor sit amet, consectetur adipiscing elit.");
        builder.CloseElement();
        builder.CloseElement();

        // Count Section
        builder.OpenElement(13, "div");
        builder.AddAttribute(14, "class", "ms-3 text-end");
        builder.OpenElement(15, "h4");
        builder.AddContent(16, count.ToString());
        builder.CloseElement();
        builder.CloseElement();

        builder.CloseElement();
    };

    private class BuildingBlock
    {
        public string Name { get; }
        public string ImageUrl { get; }
        public int Count { get; }

        public BuildingBlock(string name, string imageUrl, int count)
        {
            Name = name;
            ImageUrl = imageUrl;
            Count = count;
        }
    }
}
