@page "/portalOneSelectBed"
@inject NavigationManager NavigationManager
@inject IGenService GenService
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.WebUtilities

<h3>Select Bed</h3>

@if (IsLoading)
{
    <div class="progress">
        <div class="progress-bar progress-bar-striped progress-bar-animated" style="width: 100%;">
            Loading...
        </div>
    </div>
}
else
{
    <p>Selected Area: @Area</p>
    <p>Selected Building: @BuildingId</p>
    <p>Selected Wing: @Wing</p>

    <h4>Residents</h4>
    @if (ResidentNames != null && ResidentNames.Any())
    {
        <ul>
            @foreach (var name in ResidentNames)
            {
                <li>@name</li>
            }
        </ul>
    }
    else
    {
        <p>No residents found for the selected wing.</p>
    }
}

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public int? Area { get; set; } // Allow nullable in case the parameter is not provided

    [Parameter]
    [SupplyParameterFromQuery]
    public int? BuildingId { get; set; } // Allow nullable in case the parameter is not provided

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Wing { get; set; } // Allow nullable in case the parameter is not provided

    private bool IsLoading = true;
    private List<string> ResidentNames = new(); // Holds the list of resident names

    protected override async Task OnInitializedAsync()
    {
        // Check if any of the parameters are missing
        if (Area == null || BuildingId == null || Wing == null)
        {
            NavigationManager.NavigateTo("/portalOneSelectWing"); // Redirect if parameters are missing
            return;
        }

        IsLoading = true;

        // Parse the floor number from the Wing parameter
        var floor = int.TryParse(Wing?.Substring(0, 1), out var result) ? result : 0;

        // Fetch data from the database using LINQ
        ResidentNames = await Task.Run(() =>
            GenService.GetModel<BlockTest>()
                .Where(bt =>
                    bt.AgreementPeriod == 3 &&
                    bt.Active == true &&
                    bt.OccupantType == 1 &&
                    bt.Area == Area &&
                    bt.Sex == 1 &&
                    bt.Community == 1 &&
                    (bt.ContractingReqMet == 1 || bt.ContractingReqMet == 3) &&
                    bt.Building == BuildingId &&
                    bt.Floor == floor)
                .Select(bt => bt.Name) // Assuming `Name` is the field holding the resident's name
                .ToList()
        );

        IsLoading = false;
    }
}
