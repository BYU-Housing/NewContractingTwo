@page "/portalOneSelectBed"
@inject NavigationManager NavigationManager
@inject IGenService GenService
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.WebUtilities

<h3>Select Bed</h3>

<div class="progress">
    <div class="progress-bar"
         role="progressbar"
         style="width: 50%;"
         aria-valuenow="50"
         aria-valuemin="0"
         aria-valuemax="100">
        Step 5 of 10
    </div>
</div>

@if (IsLoading)
{
    <div class="progress">
        <div class="progress-bar progress-bar-striped progress-bar-animated" style="width: 100%; background-color: #6c757d;">
            Loading...
        </div>
    </div>
}
else
{
    <p>Selected Area: @Area</p>
    <p>Selected Building: @BuildingId</p>
    <p>Selected Wing: @Wing</p>

    <h4>Bedspaces</h4>
    @if (Bedspaces != null && Bedspaces.Any())
    {
        <div class="list-group">
            @foreach (var bedspace in Bedspaces)
            {
                <button class="list-group-item list-group-item-action"
                        @onclick="() => NavigateToMealPlan(bedspace.Id)">
                    @bedspace.Name
                </button>
            }
        </div>
    }
    else
    {
        <p>No bedspaces found for the selected wing.</p>
    }
}

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public int? Area { get; set; } // Allow nullable in case the parameter is not provided

    [Parameter]
    [SupplyParameterFromQuery]
    public int? BuildingId { get; set; } // Allow nullable in case the parameter is not provided

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Wing { get; set; } // Allow nullable in case the parameter is not provided

    private bool IsLoading = true;
    private List<Bedspace> Bedspaces = new(); // Holds the list of bedspaces

    private void NavigateToMealPlan(int bedspaceId)
    {
        NavigationManager.NavigateTo($"/portalOneSelectMealPlan?Area={Area}&BuildingId={BuildingId}&Wing={Wing}&BedspaceId={bedspaceId}");
    }

    protected override async Task OnInitializedAsync()
    {
        // Check if any of the parameters are missing
        if (Area == null || BuildingId == null || Wing == null)
        {
            NavigationManager.NavigateTo("/portalOneSelectWing"); // Redirect if parameters are missing
            return;
        }

        IsLoading = true;

        // Parse the floor number from the Wing parameter
        var floor = int.TryParse(Wing?.Substring(0, 1), out var result) ? result : 0;

        // Fetch bedspaces from the database
        Bedspaces = await Task.Run(() =>
            GenService.GetModel<BlockTest>()
                .Where(bt =>
                    bt.AgreementPeriod == 3 &&
                    bt.Active == true &&
                    bt.OccupantType == 1 &&
                    bt.Area == Area &&
                    bt.Sex == 1 &&
                    bt.Community == 1 &&
                    (bt.ContractingReqMet == 1 || bt.ContractingReqMet == 3) &&
                    bt.Building == BuildingId &&
                    bt.Floor == floor)
                .Select(bt => new Bedspace { Id = bt.Id, Name = bt.Name }) // Assuming BlockTest has Id and Name
                .ToList()
        );

        IsLoading = false;
    }

    // Temporary class to hold bedspace data
    private class Bedspace
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }
}
